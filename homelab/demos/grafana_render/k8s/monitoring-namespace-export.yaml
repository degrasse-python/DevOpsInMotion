apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: grafana
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-09-24T22:31:47Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: latest
      helm.sh/chart: grafana-8.5.1
    name: grafana
    namespace: monitoring
    resourceVersion: "355651"
    uid: 2afe8a7a-445d-4a68-8ac0-c12dd90d7efc
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 18bf832fd5abc662751dd7dbfbc0383abe039319943b8f7bce1bf6457216ddd5
          checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
          checksum/secret: f3ed8cbd3358326271021a5fa19ab7b408664186f7614a6d3e01f6a4e5bd9bc4
          kubectl.kubernetes.io/default-container: grafana
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: grafana
          app.kubernetes.io/name: grafana
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: grafana
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
          - name: GF_RENDERING_CALLBACK_URL
            value: http://grafana.monitoring.svc.cluster.local/
          - name: GF_RENDERING_PLUGIN_SKIP_DOWNLOAD
            value: "true"
          - name: GF_RENDERING_SERVER_URL
            value: http://grafana-image-renderer.monitoring.svc.cluster.local:8081/render
          image: docker.io/grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 3000
            name: grafana
            protocol: TCP
          - containerPort: 9094
            name: gossip-tcp
            protocol: TCP
          - containerPort: 9094
            name: gossip-udp
            protocol: UDP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        initContainers:
        - command:
          - chown
          - -R
          - 472:472
          - /var/lib/grafana
          image: docker.io/library/busybox:1.31.1
          imagePullPolicy: IfNotPresent
          name: init-chown-data
          resources: {}
          securityContext:
            capabilities:
              add:
              - CHOWN
            runAsNonRoot: false
            runAsUser: 0
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: storage
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsNonRoot: true
          runAsUser: 472
        serviceAccount: grafana
        serviceAccountName: grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: grafana
          name: config
        - name: storage
          persistentVolumeClaim:
            claimName: grafana
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-24T22:31:47Z"
      lastUpdateTime: "2024-09-24T22:32:25Z"
      message: ReplicaSet "grafana-5f99d988c4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-10-14T13:49:36Z"
      lastUpdateTime: "2024-10-14T13:49:36Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"grafana-image-renderer"},"name":"grafana-image-renderer","namespace":"monitoring"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"grafana-image-renderer"}},"template":{"metadata":{"labels":{"app":"grafana-image-renderer"}},"spec":{"containers":[{"env":[{"name":"ENABLE_METRICS","value":"true"},{"name":"ENABLE_METRICS_ENDPOINT","value":"true"},{"name":"TZ","value":"UTC"}],"image":"grafana/grafana-image-renderer:latest","imagePullPolicy":"IfNotPresent","livenessProbe":{"httpGet":{"path":"/","port":8081},"initialDelaySeconds":15,"periodSeconds":20},"name":"grafana-image-renderer","ports":[{"containerPort":8081,"name":"http"}],"readinessProbe":{"httpGet":{"path":"/","port":8081},"initialDelaySeconds":5,"periodSeconds":10},"resources":{"limits":{"cpu":"1000m","memory":"2Gi"},"requests":{"cpu":"500m","memory":"1Gi"}}}]}}}}
    creationTimestamp: "2024-09-24T22:27:50Z"
    generation: 1
    labels:
      app: grafana-image-renderer
    name: grafana-image-renderer
    namespace: monitoring
    resourceVersion: "355607"
    uid: 7422d4e5-bcbf-486a-897d-12f7925cd349
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: grafana-image-renderer
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana-image-renderer
      spec:
        containers:
        - env:
          - name: ENABLE_METRICS
            value: "true"
          - name: ENABLE_METRICS_ENDPOINT
            value: "true"
          - name: TZ
            value: UTC
          image: grafana/grafana-image-renderer:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: grafana-image-renderer
          ports:
          - containerPort: 8081
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-24T22:27:50Z"
      lastUpdateTime: "2024-09-24T22:28:20Z"
      message: ReplicaSet "grafana-image-renderer-88c89fdc9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-10-14T13:49:30Z"
      lastUpdateTime: "2024-10-14T13:49:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"nginx-deployment","namespace":"monitoring"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nginx"}},"template":{"metadata":{"labels":{"app":"nginx"}},"spec":{"containers":[{"image":"nginx:latest","name":"nginx","ports":[{"containerPort":80}],"volumeMounts":[{"mountPath":"/etc/nginx/conf.d","name":"nginx-config"}]},{"args":["-nginx.scrape-uri=http://localhost:80/stub_status"],"image":"nginx/nginx-prometheus-exporter:0.9.0","name":"nginx-exporter","ports":[{"containerPort":9113}]}],"volumes":[{"configMap":{"name":"nginx-config"},"name":"nginx-config"}]}}}}
    creationTimestamp: "2024-10-17T20:49:43Z"
    generation: 2
    name: nginx-deployment
    namespace: monitoring
    resourceVersion: "391252"
    uid: b02a8703-7a2e-45f4-9d4a-5f2c2914ced7
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
      spec:
        containers:
        - image: nginx:latest
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nginx/conf.d
            name: nginx-config
        - args:
          - -nginx.scrape-uri=http://localhost:80/stub_status
          image: nginx/nginx-prometheus-exporter:0.9.0
          imagePullPolicy: IfNotPresent
          name: nginx-exporter
          ports:
          - containerPort: 9113
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: nginx-config
          name: nginx-config
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-17T20:49:45Z"
      lastUpdateTime: "2024-10-17T20:49:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-17T20:49:43Z"
      lastUpdateTime: "2024-10-17T21:20:15Z"
      message: ReplicaSet "nginx-deployment-76464464f5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:46Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.13.0
      helm.sh/chart: kube-state-metrics-5.25.1
    name: prometheus-kube-state-metrics
    namespace: monitoring
    resourceVersion: "382870"
    uid: cf3ba945-7015-4f20-aca2-a53a462a5665
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: prometheus
        app.kubernetes.io/name: kube-state-metrics
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics
          app.kubernetes.io/instance: prometheus
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kube-state-metrics
          app.kubernetes.io/part-of: kube-state-metrics
          app.kubernetes.io/version: 2.13.0
          helm.sh/chart: kube-state-metrics-5.25.1
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --port=8080
          - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.13.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kube-state-metrics
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: prometheus-kube-state-metrics
        serviceAccountName: prometheus-kube-state-metrics
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-17T05:23:56Z"
      lastUpdateTime: "2024-10-17T05:23:56Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-17T05:23:46Z"
      lastUpdateTime: "2024-10-17T05:23:56Z"
      message: ReplicaSet "prometheus-kube-state-metrics-79c867c577" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:46Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-pushgateway
      app.kubernetes.io/version: v1.9.0
      helm.sh/chart: prometheus-pushgateway-2.14.0
    name: prometheus-prometheus-pushgateway
    namespace: monitoring
    resourceVersion: "382878"
    uid: b252f7a4-5eb3-4c5d-9b70-37e1046d3ae1
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: prometheus
        app.kubernetes.io/name: prometheus-pushgateway
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: prometheus
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: prometheus-pushgateway
          app.kubernetes.io/version: v1.9.0
          helm.sh/chart: prometheus-pushgateway-2.14.0
      spec:
        automountServiceAccountToken: true
        containers:
        - image: quay.io/prometheus/pushgateway:v1.9.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: pushgateway
          ports:
          - containerPort: 9091
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-prometheus-pushgateway
        serviceAccountName: prometheus-prometheus-pushgateway
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: storage-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-17T05:24:06Z"
      lastUpdateTime: "2024-10-17T05:24:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-17T05:23:46Z"
      lastUpdateTime: "2024-10-17T05:24:06Z"
      message: ReplicaSet "prometheus-prometheus-pushgateway-57c548bd6f" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:46Z"
    generation: 2
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.54.1
      helm.sh/chart: prometheus-25.27.0
    name: prometheus-server
    namespace: monitoring
    resourceVersion: "391067"
    uid: 79e62532-e30c-4896-95cd-2d1a01c9f0ae
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: prometheus
        app.kubernetes.io/name: prometheus
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/restartedAt: "2024-10-17T14:00:26-07:00"
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: server
          app.kubernetes.io/instance: prometheus
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: prometheus
          app.kubernetes.io/part-of: prometheus
          app.kubernetes.io/version: v2.54.1
          helm.sh/chart: prometheus-25.27.0
      spec:
        containers:
        - args:
          - --watched-dir=/etc/config
          - --listen-address=0.0.0.0:8080
          - --reload-url=http://127.0.0.1:9090/-/reload
          image: quay.io/prometheus-operator/prometheus-config-reloader:v0.76.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: prometheus-server-configmap-reload
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: quay.io/prometheus/prometheus:v2.54.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 4
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        enableServiceLinks: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prometheus-server
        serviceAccountName: prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus-server
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-server
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-10-17T21:01:35Z"
      lastUpdateTime: "2024-10-17T21:01:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-10-17T05:23:46Z"
      lastUpdateTime: "2024-10-17T21:01:35Z"
      message: ReplicaSet "prometheus-server-7f4cf4998c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 18bf832fd5abc662751dd7dbfbc0383abe039319943b8f7bce1bf6457216ddd5
      checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
      checksum/secret: f3ed8cbd3358326271021a5fa19ab7b408664186f7614a6d3e01f6a4e5bd9bc4
      kubectl.kubernetes.io/default-container: grafana
    creationTimestamp: "2024-10-14T13:49:19Z"
    generateName: grafana-5f99d988c4-
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
      pod-template-hash: 5f99d988c4
    name: grafana-5f99d988c4-dnrfl
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: grafana-5f99d988c4
      uid: 5198d45e-73ba-41c6-a216-821d39f0e41d
    resourceVersion: "355647"
    uid: 26fd23c4-ec12-4e18-9a29-56d52e87e8ee
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: GF_SECURITY_ADMIN_USER
        valueFrom:
          secretKeyRef:
            key: admin-user
            name: grafana
      - name: GF_SECURITY_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: grafana
      - name: GF_PATHS_DATA
        value: /var/lib/grafana/
      - name: GF_PATHS_LOGS
        value: /var/log/grafana
      - name: GF_PATHS_PLUGINS
        value: /var/lib/grafana/plugins
      - name: GF_PATHS_PROVISIONING
        value: /etc/grafana/provisioning
      - name: GF_RENDERING_CALLBACK_URL
        value: http://grafana.monitoring.svc.cluster.local/
      - name: GF_RENDERING_PLUGIN_SKIP_DOWNLOAD
        value: "true"
      - name: GF_RENDERING_SERVER_URL
        value: http://grafana-image-renderer.monitoring.svc.cluster.local:8081/render
      image: docker.io/grafana/grafana:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 10
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: grafana
      ports:
      - containerPort: 3000
        name: grafana
        protocol: TCP
      - containerPort: 9094
        name: gossip-tcp
        protocol: TCP
      - containerPort: 9094
        name: gossip-udp
        protocol: UDP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /api/health
          port: 3000
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/grafana/grafana.ini
        name: config
        subPath: grafana.ini
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nlwpl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - chown
      - -R
      - 472:472
      - /var/lib/grafana
      image: docker.io/library/busybox:1.31.1
      imagePullPolicy: IfNotPresent
      name: init-chown-data
      resources: {}
      securityContext:
        capabilities:
          add:
          - CHOWN
        runAsNonRoot: false
        runAsUser: 0
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/grafana
        name: storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nlwpl
        readOnly: true
    nodeName: aks-agentpool-40807194-vmss00001a
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 472
      runAsGroup: 472
      runAsNonRoot: true
      runAsUser: 472
    serviceAccount: grafana
    serviceAccountName: grafana
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: grafana
      name: config
    - name: storage
      persistentVolumeClaim:
        claimName: grafana
    - name: kube-api-access-nlwpl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:35Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c74ce579a589e1bbf800e5ec18e44f1150eec27caf9b90cf6ec55be2c3d89f21
      image: docker.io/grafana/grafana:11.2.0
      imageID: docker.io/grafana/grafana@sha256:408afb9726de5122b00a2576763a8a57a3c86d5b0eff5305bc994ceb3eb96c3f
      lastState: {}
      name: grafana
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-14T13:49:35Z"
    hostIP: 10.224.1.35
    initContainerStatuses:
    - containerID: containerd://8aee162af5658de9397156ec9f7aa4221d9f01928ac4b1e0c05ff493b9727391
      image: docker.io/library/busybox:1.31.1
      imageID: docker.io/library/busybox@sha256:95cf004f559831017cdf4628aaf1bb30133677be8702a8c5f2994629f637a209
      lastState: {}
      name: init-chown-data
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://8aee162af5658de9397156ec9f7aa4221d9f01928ac4b1e0c05ff493b9727391
          exitCode: 0
          finishedAt: "2024-10-14T13:49:34Z"
          reason: Completed
          startedAt: "2024-10-14T13:49:34Z"
    phase: Running
    podIP: 10.224.1.96
    podIPs:
    - ip: 10.224.1.96
    qosClass: Burstable
    startTime: "2024-10-14T13:49:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-14T13:49:19Z"
    generateName: grafana-image-renderer-88c89fdc9-
    labels:
      app: grafana-image-renderer
      pod-template-hash: 88c89fdc9
    name: grafana-image-renderer-88c89fdc9-w98mh
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: grafana-image-renderer-88c89fdc9
      uid: 7e09ecf8-f33f-42a1-ab03-7f74c0a8f7e7
    resourceVersion: "355603"
    uid: 379254f3-6384-4d2f-bf55-4907a431a085
  spec:
    containers:
    - env:
      - name: ENABLE_METRICS
        value: "true"
      - name: ENABLE_METRICS_ENDPOINT
        value: "true"
      - name: TZ
        value: UTC
      image: grafana/grafana-image-renderer:latest
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 1
      name: grafana-image-renderer
      ports:
      - containerPort: 8081
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: "1"
          memory: 2Gi
        requests:
          cpu: 500m
          memory: 1Gi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ftt66
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-agentpool-40807194-vmss00000z
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-ftt66
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-14T13:49:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a3103805ab6060f4000155a9999dc3e8d3725c440ebd97b77ad6773f66f26976
      image: docker.io/grafana/grafana-image-renderer:latest
      imageID: docker.io/grafana/grafana-image-renderer@sha256:60c49ab1a52e029a02f56141993a2d9073a7eed525c2de22dd6c4d53f39b3b23
      lastState: {}
      name: grafana-image-renderer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-14T13:49:21Z"
    hostIP: 10.224.3.0
    phase: Running
    podIP: 10.224.3.102
    podIPs:
    - ip: 10.224.3.102
    qosClass: Burstable
    startTime: "2024-10-14T13:49:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-17T21:20:09Z"
    generateName: nginx-deployment-76464464f5-
    labels:
      app: nginx
      pod-template-hash: 76464464f5
    name: nginx-deployment-76464464f5-jb6lx
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deployment-76464464f5
      uid: 304a7f03-1f22-431a-aee3-c85b8f45c02d
    resourceVersion: "391238"
    uid: 5202c229-1109-4099-b6a7-7119ed23263d
  spec:
    containers:
    - image: nginx:latest
      imagePullPolicy: Always
      name: nginx
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/nginx/conf.d
        name: nginx-config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2hfr6
        readOnly: true
    - args:
      - -nginx.scrape-uri=http://localhost:80/stub_status
      image: nginx/nginx-prometheus-exporter:0.9.0
      imagePullPolicy: IfNotPresent
      name: nginx-exporter
      ports:
      - containerPort: 9113
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2hfr6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-agentpool-40807194-vmss00000z
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: nginx-config
      name: nginx-config
    - name: kube-api-access-2hfr6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:20:09Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:20:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:20:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:20:09Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0b62a2bef1f8b92b08f6f48c61ba93c107b7424fa861e5a1338899730c641189
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:28402db69fec7c17e179ea87882667f1e054391138f77ffaf0c3eb388efc3ffb
      lastState: {}
      name: nginx
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T21:20:12Z"
    - containerID: containerd://492bd58ced935c37a78ec6a01672499a453410cc54a41ea48892d62309986249
      image: docker.io/nginx/nginx-prometheus-exporter:0.9.0
      imageID: docker.io/nginx/nginx-prometheus-exporter@sha256:0caaabffc24204ca72f79c22d222bc7ddbc16355a65a3661c7d17a9a4991aa68
      lastState: {}
      name: nginx-exporter
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T21:20:14Z"
    hostIP: 10.224.3.0
    phase: Running
    podIP: 10.224.3.17
    podIPs:
    - ip: 10.224.3.17
    qosClass: BestEffort
    startTime: "2024-10-17T21:20:09Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 195883ecd2ee641260040a4479e9ef202bcac4f1146b5f55dcae7155de43bcc8
    creationTimestamp: "2024-10-17T05:23:47Z"
    generateName: prometheus-alertmanager-
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: alertmanager
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: prometheus-alertmanager-fcbc844b6
      statefulset.kubernetes.io/pod-name: prometheus-alertmanager-0
    name: prometheus-alertmanager-0
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: prometheus-alertmanager
      uid: 6def2d4f-cd9e-4ce4-a7ca-46407e77d257
    resourceVersion: "382919"
    uid: be71b0a3-4bce-4155-892a-ae785a459b11
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --storage.path=/alertmanager
      - --config.file=/etc/alertmanager/alertmanager.yml
      env:
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      image: quay.io/prometheus/alertmanager:v0.27.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: alertmanager
      ports:
      - containerPort: 9093
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: http
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/alertmanager
        name: config
      - mountPath: /alertmanager
        name: storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7kbs5
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: prometheus-alertmanager-0
    nodeName: aks-agentpool-40807194-vmss00000v
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-alertmanager
    serviceAccountName: prometheus-alertmanager
    subdomain: prometheus-alertmanager-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: storage
      persistentVolumeClaim:
        claimName: storage-prometheus-alertmanager-0
    - configMap:
        defaultMode: 420
        name: prometheus-alertmanager
      name: config
    - name: kube-api-access-7kbs5
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://07ca45901f67ecdb2acc49b12eea4fa238acb1b3fb4f1063f01bac409787ede3
      image: quay.io/prometheus/alertmanager:v0.27.0
      imageID: quay.io/prometheus/alertmanager@sha256:e13b6ed5cb929eeaee733479dce55e10eb3bc2e9c4586c705a4e8da41e5eacf5
      lastState: {}
      name: alertmanager
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T05:24:30Z"
    hostIP: 10.224.2.132
    phase: Running
    podIP: 10.224.2.192
    podIPs:
    - ip: 10.224.2.192
    qosClass: Burstable
    startTime: "2024-10-17T05:24:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-17T05:23:46Z"
    generateName: prometheus-kube-state-metrics-79c867c577-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.13.0
      helm.sh/chart: kube-state-metrics-5.25.1
      pod-template-hash: 79c867c577
    name: prometheus-kube-state-metrics-79c867c577-kqw2d
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-kube-state-metrics-79c867c577
      uid: 60c40cd9-99a1-4dde-b359-49f7e1b159bd
    resourceVersion: "382866"
    uid: 675da2f4-c2a2-4c85-9af8-5c8c624a8d1e
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --port=8080
      - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
      image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.13.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: kube-state-metrics
      ports:
      - containerPort: 8080
        name: http
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5zcck
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-agentpool-40807194-vmss00000v
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: prometheus-kube-state-metrics
    serviceAccountName: prometheus-kube-state-metrics
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-5zcck
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f13e82fd9a947173ecb37028eb8d68d468882dd098deb38af2bf94f13fb4febe
      image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.13.0
      imageID: registry.k8s.io/kube-state-metrics/kube-state-metrics@sha256:639a1e2da549210adddc0391ff91e270e83f7873014aec53258462812f741e6f
      lastState: {}
      name: kube-state-metrics
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T05:23:47Z"
    hostIP: 10.224.2.132
    phase: Running
    podIP: 10.224.2.154
    podIPs:
    - ip: 10.224.2.154
    qosClass: BestEffort
    startTime: "2024-10-17T05:23:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    generateName: prometheus-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-755wt
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "382764"
    uid: 594daf70-b4d0-47bf-872a-388eef6632cb
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss00001a
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 No preemption
        victims found for incoming pod, 9 Preemption is not helpful for scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    generateName: prometheus-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-pndzq
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "382765"
    uid: 549aaae9-dbe5-4c1a-b4e1-1a98665d0397
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss00000z
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 No preemption
        victims found for incoming pod, 9 Preemption is not helpful for scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    generateName: prometheus-prometheus-node-exporter
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-rldzj
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "382786"
    uid: 196de3b7-2456-45ac-a4d3-a2026b62d5bb
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss000011
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 node(s) didn''t
        have free ports for the requested pod ports, 9 Preemption is not helpful for
        scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-23T13:00:05Z"
    generateName: prometheus-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-ww7sf
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "460126"
    uid: c660fa4b-ab42-48bf-88ef-654b79d16452
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss00001c
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-23T13:00:05Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 No preemption
        victims found for incoming pod, 9 Preemption is not helpful for scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-17T05:23:46Z"
    generateName: prometheus-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-xnmbc
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "382815"
    uid: 39d4a6fd-857e-4ec0-9583-f98f38abd3a7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss00000a
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 node(s) didn''t
        have free ports for the requested pod ports, 9 Preemption is not helpful for
        scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    generateName: prometheus-prometheus-node-exporter-
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      controller-revision-hash: 7fdfdc7dc
      helm.sh/chart: prometheus-node-exporter-4.39.0
      pod-template-generation: "1"
    name: prometheus-prometheus-node-exporter-zlkkf
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: prometheus-prometheus-node-exporter
      uid: ec03b183-aebd-4764-ac40-6488ed523b18
    resourceVersion: "382763"
    uid: db89d865-4082-4753-acc7-1d92deb30fb5
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - aks-agentpool-40807194-vmss00000v
    automountServiceAccountToken: false
    containers:
    - args:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host/root
      - --path.udev.data=/host/root/run/udev/data
      - --web.listen-address=[$(HOST_IP)]:9100
      env:
      - name: HOST_IP
        value: 0.0.0.0
      image: quay.io/prometheus/node-exporter:v1.8.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: node-exporter
      ports:
      - containerPort: 9100
        hostPort: 9100
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 9100
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/proc
        name: proc
        readOnly: true
      - mountPath: /host/sys
        name: sys
        readOnly: true
      - mountPath: /host/root
        mountPropagation: HostToContainer
        name: root
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    hostPID: true
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-node-exporter
    serviceAccountName: prometheus-prometheus-node-exporter
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /proc
        type: ""
      name: proc
    - hostPath:
        path: /sys
        type: ""
      name: sys
    - hostPath:
        path: /
        type: ""
      name: root
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:45Z"
      message: '0/10 nodes are available: 1 node(s) didn''t have free ports for the
        requested pod ports. preemption: 0/10 nodes are available: 1 No preemption
        victims found for incoming pod, 9 Preemption is not helpful for scheduling..'
      reason: Unschedulable
      status: "False"
      type: PodScheduled
    phase: Pending
    qosClass: BestEffort
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-10-17T05:23:46Z"
    generateName: prometheus-prometheus-pushgateway-57c548bd6f-
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-pushgateway
      app.kubernetes.io/version: v1.9.0
      helm.sh/chart: prometheus-pushgateway-2.14.0
      pod-template-hash: 57c548bd6f
    name: prometheus-prometheus-pushgateway-57c548bd6f-x5dxp
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-prometheus-pushgateway-57c548bd6f
      uid: 917b79cc-9917-46cb-a290-c8165bc9a7cf
    resourceVersion: "382874"
    uid: 1e56e5d6-746c-443d-9edf-d00b5ffc59a9
  spec:
    automountServiceAccountToken: true
    containers:
    - image: quay.io/prometheus/pushgateway:v1.9.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9091
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: pushgateway
      ports:
      - containerPort: 9091
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9091
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qjkll
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-agentpool-40807194-vmss00000a
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-prometheus-pushgateway
    serviceAccountName: prometheus-prometheus-pushgateway
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: storage-volume
    - name: kube-api-access-qjkll
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:24:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T05:23:46Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ca6dfabfa6579ce00c2bb6e5972804f974eb619f4cd2f0b7682910b87fcaa27d
      image: quay.io/prometheus/pushgateway:v1.9.0
      imageID: quay.io/prometheus/pushgateway@sha256:98a458415f8f5afcfd45622d289a0aa67063563bec0f90d598ebc76783571936
      lastState: {}
      name: pushgateway
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T05:23:48Z"
    hostIP: 10.224.0.100
    phase: Running
    podIP: 10.224.0.17
    podIPs:
    - ip: 10.224.0.17
    qosClass: BestEffort
    startTime: "2024-10-17T05:23:46Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2024-10-17T14:00:26-07:00"
    creationTimestamp: "2024-10-17T21:00:28Z"
    generateName: prometheus-server-7f4cf4998c-
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.54.1
      helm.sh/chart: prometheus-25.27.0
      pod-template-hash: 7f4cf4998c
    name: prometheus-server-7f4cf4998c-b2k5f
    namespace: monitoring
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: prometheus-server-7f4cf4998c
      uid: 1ef2d45e-5cb7-4e10-8602-696a7736b6d0
    resourceVersion: "391063"
    uid: c9f78b84-f44a-471e-a94a-62e37e12bbb9
  spec:
    containers:
    - args:
      - --watched-dir=/etc/config
      - --listen-address=0.0.0.0:8080
      - --reload-url=http://127.0.0.1:9090/-/reload
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.76.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: metrics
          scheme: HTTP
        initialDelaySeconds: 2
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: prometheus-server-configmap-reload
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: metrics
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mjv99
        readOnly: true
    - args:
      - --storage.tsdb.retention.time=15d
      - --config.file=/etc/config/prometheus.yml
      - --storage.tsdb.path=/data
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      image: quay.io/prometheus/prometheus:v2.54.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/healthy
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 15
        successThreshold: 1
        timeoutSeconds: 10
      name: prometheus-server
      ports:
      - containerPort: 9090
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /-/ready
          port: 9090
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 4
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config
        name: config-volume
      - mountPath: /data
        name: storage-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mjv99
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: aks-agentpool-40807194-vmss000011
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
    serviceAccount: prometheus-server
    serviceAccountName: prometheus-server
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: prometheus-server
      name: config-volume
    - name: storage-volume
      persistentVolumeClaim:
        claimName: prometheus-server
    - name: kube-api-access-mjv99
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:00:28Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:01:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:01:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-10-17T21:00:28Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1b33487191b2331df1957de1ff87b65e934b10b77e56cee4f27eaa3c0e566d0b
      image: quay.io/prometheus/prometheus:v2.54.1
      imageID: quay.io/prometheus/prometheus@sha256:f6639335d34a77d9d9db382b92eeb7fc00934be8eae81dbc03b31cfe90411a94
      lastState: {}
      name: prometheus-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T21:01:01Z"
    - containerID: containerd://a6bac22186f30bfd42d8f5de3db13308feb1b94d03f9c8587725649e4e4c8415
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.76.0
      imageID: quay.io/prometheus-operator/prometheus-config-reloader@sha256:3ee47d8f6eae9e3997bd928525946c4eb06d5bb82bf1da69ca743169c331c6a0
      lastState: {}
      name: prometheus-server-configmap-reload
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-10-17T21:01:01Z"
    hostIP: 10.224.3.109
    phase: Running
    podIP: 10.224.3.196
    podIPs:
    - ip: 10.224.3.196
    qosClass: BestEffort
    startTime: "2024-10-17T21:00:28Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: grafana
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-09-24T22:31:46Z"
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: latest
      helm.sh/chart: grafana-8.5.1
    name: grafana
    namespace: monitoring
    resourceVersion: "158880"
    uid: e679f72a-5440-47a3-addf-e3b324b3dfda
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.0.74.178
    clusterIPs:
    - 10.0.74.178
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: service
      nodePort: 30835
      port: 80
      protocol: TCP
      targetPort: 3000
    selector:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - ip: 74.241.234.170
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"grafana-image-renderer"},"name":"grafana-image-renderer","namespace":"monitoring"},"spec":{"ports":[{"port":8081,"protocol":"TCP","targetPort":8081}],"selector":{"app":"grafana-image-renderer"},"type":"ClusterIP"}}
    creationTimestamp: "2024-09-24T22:27:54Z"
    labels:
      app: grafana-image-renderer
    name: grafana-image-renderer
    namespace: monitoring
    resourceVersion: "158780"
    uid: 3a57eda0-ef9c-4ab9-98cc-3635b801d2c0
  spec:
    clusterIP: 10.0.250.33
    clusterIPs:
    - 10.0.250.33
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: grafana-image-renderer
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"prometheus.io/port":"9113","prometheus.io/scrape":"true"},"name":"nginx-service","namespace":"monitoring"},"spec":{"ports":[{"name":"http","port":80,"targetPort":80},{"name":"metrics","port":9113,"targetPort":9113}],"selector":{"app":"nginx"}}}
      prometheus.io/port: "9113"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-17T20:49:47Z"
    name: nginx-service
    namespace: monitoring
    resourceVersion: "390881"
    uid: 595af3c5-ebd3-476b-9770-6e2d2bb3dd80
  spec:
    clusterIP: 10.0.235.31
    clusterIPs:
    - 10.0.235.31
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: metrics
      port: 9113
      protocol: TCP
      targetPort: 9113
    selector:
      app: nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/version: v0.27.0
      helm.sh/chart: alertmanager-1.12.0
    name: prometheus-alertmanager
    namespace: monitoring
    resourceVersion: "382725"
    uid: 93464031-f465-4ae8-998e-3f19882c4d29
  spec:
    clusterIP: 10.0.242.172
    clusterIPs:
    - 10.0.242.172
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9093
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: alertmanager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/version: v0.27.0
      helm.sh/chart: alertmanager-1.12.0
    name: prometheus-alertmanager-headless
    namespace: monitoring
    resourceVersion: "382718"
    uid: 2b620a17-cee0-42ef-8b8f-0bc0b35fc88b
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9093
      protocol: TCP
      targetPort: http
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: alertmanager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/part-of: kube-state-metrics
      app.kubernetes.io/version: 2.13.0
      helm.sh/chart: kube-state-metrics-5.25.1
    name: prometheus-kube-state-metrics
    namespace: monitoring
    resourceVersion: "382726"
    uid: 76bdea30-a051-45fd-828b-e616eb7b5200
  spec:
    clusterIP: 10.0.93.89
    clusterIPs:
    - 10.0.93.89
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: kube-state-metrics
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-node-exporter
      app.kubernetes.io/part-of: prometheus-node-exporter
      app.kubernetes.io/version: 1.8.2
      helm.sh/chart: prometheus-node-exporter-4.39.0
    name: prometheus-prometheus-node-exporter
    namespace: monitoring
    resourceVersion: "382720"
    uid: e5e7e4f0-43ec-4dc7-8a0f-511df695eeaa
  spec:
    clusterIP: 10.0.124.222
    clusterIPs:
    - 10.0.124.222
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 9100
      protocol: TCP
      targetPort: 9100
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: prometheus-node-exporter
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
      prometheus.io/probe: pushgateway
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus-pushgateway
      app.kubernetes.io/version: v1.9.0
      helm.sh/chart: prometheus-pushgateway-2.14.0
    name: prometheus-prometheus-pushgateway
    namespace: monitoring
    resourceVersion: "382738"
    uid: 3e9b1e2b-f0aa-4ca9-ad49-224ec4d7f063
  spec:
    clusterIP: 10.0.179.110
    clusterIPs:
    - 10.0.179.110
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
    selector:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: prometheus-pushgateway
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:45Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.54.1
      helm.sh/chart: prometheus-25.27.0
    name: prometheus-server
    namespace: monitoring
    resourceVersion: "382734"
    uid: 4aec994d-70a5-4c2f-8ed4-004793e45ebd
  spec:
    clusterIP: 10.0.64.35
    clusterIPs:
    - 10.0.64.35
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/name: prometheus
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    grafana.ini: |
      [analytics]
      check_for_updates = true
      [grafana_net]
      url = https://grafana.net
      [log]
      mode = console
      [paths]
      data = /var/lib/grafana/
      logs = /var/log/grafana
      plugins = /var/lib/grafana/plugins
      provisioning = /etc/grafana/provisioning
      [rendering]
      callback_url = http://grafana.monitoring.svc.cluster.local/
      server_url = http://grafana-image-renderer.monitoring.svc.cluster.local:8081/render
      [server]
      domain = ''
      root_url = %(protocol)s://%(domain)s/
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: grafana
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-09-24T22:31:44Z"
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: latest
      helm.sh/chart: grafana-8.5.1
    name: grafana
    namespace: monitoring
    resourceVersion: "158847"
    uid: 7819f6ba-6d34-417e-bc6c-383ad7652166
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIedEeDuxwWYEwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNDA5MDkyMDE2NTVaFw0zNDA5MDcyMDE2NTVaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDAAgX0HYAVJ4maVun7Hl6bwp+gXDyYCmUUodj/RfnsEoVKvi0dotIJB8T5
      EiD4crAUcc6pDs8KbxuPDZabR1HVZIV0aKdT0Rrgwap6d6uoJEMfdSMDXsPofOyF
      4OO2U/iaTRv9ETdDf5sVCLogaumL4sJ+oWWM16GMC2WY/voWyyd7p3JkPCmEbqyP
      tDdbFBF2CJx9Z8P/qVi3/IFjHWMAuhR/u44ujxEyeB6evisiGqa/PwkYo9pXmWVi
      3lZrzbcXSpgzKZyFXcRo90n2CWHc85gLaPOy95M55Vp2F+SYdWzQCf5OCcPj5J08
      ofD9dmxCQrCPthEk2/Ad+vwhTKZlAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQC9eNCtOM0SWjnxmXh2ta7AtYfgTAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQBNyh2K0LIN
      PEzb66OOFu8srkI0JFA4+8dOrsS3uY8a+pbaVJCFVTYBFan49ZzS1cbMvXOB+i3P
      zhhQcxni2weO/XZcl4NIsHkKEDWCSHfXT1vUr79mtFqrQL4f+PsW3At0CAA6Zw7K
      zrHGTtuBwo7VWdUX88rsGijolRNEjfxLGkIIkE61hNA4kT3sDubLwSDQy+0h4xSY
      8bCz1/Mg5UL5TlVqEUTInq6VIIrK9SoKpCXOu7tu4igqGgkFVtI6UkMsQuA066WX
      V72K8JGC7DWxj4xOLLOSdUI78h/909CBfw+HenQM+Y8BXKWk0Epiei0nvgAdnAyO
      dz+gtqWACF0h
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-09-24T22:19:52Z"
    name: kube-root-ca.crt
    namespace: monitoring
    resourceVersion: "158657"
    uid: 4dcc5930-4073-493e-abde-5b0a1001f8ff
- apiVersion: v1
  data:
    nginx-status.conf: |
      server {
          listen 80;
          server_name localhost;
          location /stub_status {
              stub_status on;
              access_log off;
          }
      }
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"nginx-status.conf":"server {\n    listen 80;\n    server_name localhost;\n    location /stub_status {\n        stub_status on;\n        access_log off;\n    }\n}\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"nginx-config","namespace":"monitoring"}}
    creationTimestamp: "2024-10-17T20:49:39Z"
    name: nginx-config
    namespace: monitoring
    resourceVersion: "390858"
    uid: b8201261-8e50-4dec-bd38-e539340abec1
- apiVersion: v1
  data:
    alertmanager.yml: |
      global: {}
      receivers:
      - name: default-receiver
      route:
        group_interval: 5m
        group_wait: 10s
        receiver: default-receiver
        repeat_interval: 3h
      templates:
      - /etc/alertmanager/*.tmpl
  kind: ConfigMap
  metadata:
    annotations:
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:42Z"
    labels:
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: alertmanager
      app.kubernetes.io/version: v0.27.0
      helm.sh/chart: alertmanager-1.12.0
    name: prometheus-alertmanager
    namespace: monitoring
    resourceVersion: "382711"
    uid: 65a9b367-a4a6-48e4-bcf4-3103a8c89113
- apiVersion: v1
  data:
    alerting_rules.yml: |
      {}
    alerts: |
      {}
    allow-snippet-annotations: "false"
    prometheus: |
      yml: |+
        scrape_configs:
          - job_name: 'nginx'
            static_configs:
              - targets: ['nginx-service.default.svc.cluster.local:9913']
    prometheus.yml: |
      global:
        evaluation_interval: 1m
        scrape_interval: 1m
        scrape_timeout: 10s
      rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml
      - /etc/config/rules
      - /etc/config/alerts
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: default;kubernetes;https
          source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - replacement: kubernetes.default.svc:443
          target_label: __address__
        - regex: (.+)
          replacement: /api/v1/nodes/$1/proxy/metrics
          source_labels:
          - __meta_kubernetes_node_name
          target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-nodes-cadvisor
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - replacement: kubernetes.default.svc:443
          target_label: __address__
        - regex: (.+)
          replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          source_labels:
          - __meta_kubernetes_node_name
          target_label: __metrics_path__
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - honor_labels: true
        job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scrape
        - action: drop
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: (.+?)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_service_annotation_prometheus_io_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
          replacement: __param_$1
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: node
      - honor_labels: true
        job_name: kubernetes-service-endpoints-slow
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: (.+?)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_service_annotation_prometheus_io_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
          replacement: __param_$1
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: node
        scrape_interval: 5m
        scrape_timeout: 30s
      - honor_labels: true
        job_name: prometheus-pushgateway
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - action: keep
          regex: pushgateway
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_probe
      - honor_labels: true
        job_name: kubernetes-services
        kubernetes_sd_configs:
        - role: service
        metrics_path: /probe
        params:
          module:
          - http_2xx
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_prometheus_io_probe
        - source_labels:
          - __address__
          target_label: __param_target
        - replacement: blackbox
          target_label: __address__
        - source_labels:
          - __param_target
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: service
      - honor_labels: true
        job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        - action: drop
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
          replacement: '[$2]:$1'
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          target_label: __address__
        - action: replace
          regex: (\d+);((([0-9]+?)(\.|$)){4})
          replacement: $2:$1
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
          replacement: __param_$1
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: pod
        - action: drop
          regex: Pending|Succeeded|Failed|Completed
          source_labels:
          - __meta_kubernetes_pod_phase
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: node
      - honor_labels: true
        job_name: kubernetes-pods-slow
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
          replacement: '[$2]:$1'
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          target_label: __address__
        - action: replace
          regex: (\d+);((([0-9]+?)(\.|$)){4})
          replacement: $2:$1
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
          replacement: __param_$1
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: pod
        - action: drop
          regex: Pending|Succeeded|Failed|Completed
          source_labels:
          - __meta_kubernetes_pod_phase
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: node
        scrape_interval: 5m
        scrape_timeout: 30s
      alerting:
        alertmanagers:
        - kubernetes_sd_configs:
            - role: pod
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
          - source_labels: [__meta_kubernetes_namespace]
            regex: monitoring
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance]
            regex: prometheus
            action: keep
          - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
            regex: alertmanager
            action: keep
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            regex: "9093"
            action: keep
    recording_rules.yml: |
      {}
    rules: |
      {}
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"prometheus.yml":"global:\n  evaluation_interval: 1m\n  scrape_interval: 1m\n  scrape_timeout: 10s\nrule_files:\n- /etc/config/recording_rules.yml\n- /etc/config/alerting_rules.yml\n- /etc/config/rules\n- /etc/config/alerts\nscrape_configs:\n- job_name: prometheus\n  static_configs:\n  - targets:\n    - localhost:9090\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-apiservers\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: default;kubernetes;https\n    source_labels:\n    - __meta_kubernetes_namespace\n    - __meta_kubernetes_service_name\n    - __meta_kubernetes_endpoint_port_name\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/$1/proxy/metrics\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n  job_name: kubernetes-nodes-cadvisor\n  kubernetes_sd_configs:\n  - role: node\n  relabel_configs:\n  - action: labelmap\n    regex: __meta_kubernetes_node_label_(.+)\n  - replacement: kubernetes.default.svc:443\n    target_label: __address__\n  - regex: (.+)\n    replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor\n    source_labels:\n    - __meta_kubernetes_node_name\n    target_label: __metrics_path__\n  scheme: https\n  tls_config:\n    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    insecure_skip_verify: true\n- honor_labels: true\n  job_name: kubernetes-service-endpoints\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape\n  - action: drop\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (.+?)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: service\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: node\n- honor_labels: true\n  job_name: kubernetes-service-endpoints-slow\n  kubernetes_sd_configs:\n  - role: endpoints\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (.+?)(?::\\d+)?;(\\d+)\n    replacement: $1:$2\n    source_labels:\n    - __address__\n    - __meta_kubernetes_service_annotation_prometheus_io_port\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_service_name\n    target_label: service\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: node\n  scrape_interval: 5m\n  scrape_timeout: 30s\n- honor_labels: true\n  job_name: prometheus-pushgateway\n  kubernetes_sd_configs:\n  - role: service\n  relabel_configs:\n  - action: keep\n    regex: pushgateway\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n- honor_labels: true\n  job_name: kubernetes-services\n  kubernetes_sd_configs:\n  - role: service\n  metrics_path: /probe\n  params:\n    module:\n    - http_2xx\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_service_annotation_prometheus_io_probe\n  - source_labels:\n    - __address__\n    target_label: __param_target\n  - replacement: blackbox\n    target_label: __address__\n  - source_labels:\n    - __param_target\n    target_label: instance\n  - action: labelmap\n    regex: __meta_kubernetes_service_label_(.+)\n  - source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - source_labels:\n    - __meta_kubernetes_service_name\n    target_label: service\n- honor_labels: true\n  job_name: kubernetes-pods\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape\n  - action: drop\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\n    replacement: '[$2]:$1'\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    - __meta_kubernetes_pod_ip\n    target_label: __address__\n  - action: replace\n    regex: (\\d+);((([0-9]+?)(\\.|$)){4})\n    replacement: $2:$1\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    - __meta_kubernetes_pod_ip\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: pod\n  - action: drop\n    regex: Pending|Succeeded|Failed|Completed\n    source_labels:\n    - __meta_kubernetes_pod_phase\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: node\n- honor_labels: true\n  job_name: kubernetes-pods-slow\n  kubernetes_sd_configs:\n  - role: pod\n  relabel_configs:\n  - action: keep\n    regex: true\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow\n  - action: replace\n    regex: (https?)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_scheme\n    target_label: __scheme__\n  - action: replace\n    regex: (.+)\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_path\n    target_label: __metrics_path__\n  - action: replace\n    regex: (\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})\n    replacement: '[$2]:$1'\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    - __meta_kubernetes_pod_ip\n    target_label: __address__\n  - action: replace\n    regex: (\\d+);((([0-9]+?)(\\.|$)){4})\n    replacement: $2:$1\n    source_labels:\n    - __meta_kubernetes_pod_annotation_prometheus_io_port\n    - __meta_kubernetes_pod_ip\n    target_label: __address__\n  - action: labelmap\n    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)\n    replacement: __param_$1\n  - action: labelmap\n    regex: __meta_kubernetes_pod_label_(.+)\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_namespace\n    target_label: namespace\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_name\n    target_label: pod\n  - action: drop\n    regex: Pending|Succeeded|Failed|Completed\n    source_labels:\n    - __meta_kubernetes_pod_phase\n  - action: replace\n    source_labels:\n    - __meta_kubernetes_pod_node_name\n    target_label: node\n  scrape_interval: 5m\n  scrape_timeout: 30s\nalerting:\n  alertmanagers:\n  - kubernetes_sd_configs:\n      - role: pod\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_namespace]\n      regex: monitoring\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance]\n      regex: prometheus\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n      regex: alertmanager\n      action: keep\n    - source_labels: [__meta_kubernetes_pod_container_port_number]\n      regex: \"9093\"\n      action: keep\n"},"kind":"ConfigMap","metadata":{"annotations":{},"creationTimestamp":null,"name":"prometheus-server","namespace":"monitoring"}}
      meta.helm.sh/release-name: prometheus
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-10-17T05:23:43Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/part-of: prometheus
      app.kubernetes.io/version: v2.54.1
      helm.sh/chart: prometheus-25.27.0
    name: prometheus-server
    namespace: monitoring
    resourceVersion: "391005"
    uid: e1a302ba-07d4-47f8-8c02-4e96447d37d9
- apiVersion: v1
  data:
    admin-password: UjJqV2dXckQ1WnpoQmlmTEE3cFFVanF2M1pMUmVLY2pBN29LZkZkRg==
    admin-user: YWRtaW4=
    ldap-toml: ""
  kind: Secret
  metadata:
    annotations:
      meta.helm.sh/release-name: grafana
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2024-09-24T22:31:43Z"
    labels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: latest
      helm.sh/chart: grafana-8.5.1
    name: grafana
    namespace: monitoring
    resourceVersion: "158846"
    uid: b8248b08-6a89-43ce-a376-d3de3471d949
  type: Opaque
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-09-24T22:31:41Z"
    labels:
      modifiedAt: "1727217107"
      name: grafana
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.grafana.v1
    namespace: monitoring
    resourceVersion: "158869"
    uid: 87ed8b17-ea17-4a05-8011-9f2bf9e6a8c2
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-17T05:23:41Z"
    labels:
      modifiedAt: "1729142627"
      name: prometheus
      owner: helm
      status: superseded
      version: "1"
    name: sh.helm.release.v1.prometheus.v1
    namespace: monitoring
    resourceVersion: "390032"
    uid: 311baebb-e759-473f-8222-8685d1c5c053
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: SDRzSUFBQUFBQUFDLyt5OStXL2lXTDRvL3E5RWZOOFA3NzFiVlcxTVNCY2xqWFF4Q2NZRVNHSEEyM1JyWkI4NzJPRjRHV3dXTStyLy9hdHpqdmNOazByMXRPYmR1V3JkaXJIUCt0blhmM1VjMVRZNjN6cmUzcldOd0RRT2Z1ZFR4M0plM2M2M2YzVmVyYjBmL0VNM1BPaUdodDc1MXFFcCt2NXpsL3JjZlZqVDlEZTY5NDE2K05KN2VPajJ2bjZtZnYxR1VaMVBIYWpXZlBMcnVrdC9vL3ZmdXZTWCsxOS8vZHBMdnRBTmFBVDRYZnlIRC9hV0YxaXUwL25XMlhqYnZhb2JkOEMxUGZSUzUxUEhEOVRnNEhlK2RaSTVQblVjTnpEUW83VnAzSDFQTm5MbkcvdWpzYjhEcW5PbkdYY3FBSWJ2Ry9yZDBWTHZQSGNmM0gybDdsem5MakNOdTFjWFF2ZGtPZHU3eDhYcURoM0ozZXZldGU5T1ZtQmF6bDNvSHZaM0FCNzh3TmgvKzgxSnorb3ptZUtMN1RwVzRPNHRaL3ZGUDRJdjBhdGZvQXRVK0p1RC9vODFBanhUZVhrYmZuYW5oWGY3ZytPZ0JRU200ZU1OMjZxaiszY1dXYUNQbHVTYkJvVGZmblB1N293ejNzRDNsOGQvTElienA3LzlyLys5TzJnR0NPRGQxZ2p1UEZmMzd6NS9SdHZ3UFJVWWQrbnk3ajdEdTk4NnF1ZDlRUi9zSFNNdy9DK1crd3Q2OTIvcHZqNlYzN0FjUDFBZGtIM3J0ODdkWi9mdXpYY2RUdzNNdi8zVytkY1hLekJzLysvVTcxOXNJMUIxTlZDL29KSC8rSzN6ZjlDeTQwWFdyQTN0NmZPcnV6K3BlLzN1ZjhXYnV4dFFBNG9jWXVGK1ZXanNBMXQxMUczVExRK29RZStIN3prNzFRMjNQY3l1OEs5ejBkbmQvTld1dXZlYjgvOTk5UC9pSWUvdTdzUWh2K0FXN0xlNzc2NSt0ekxBWVc4RjRkMTNGMW9ndkROVi8wNHpET2RPdDN4Vmc0YU83a3MzWHRVRERPNTh5d0hHM2QzZFhYSEk1SDlXY0tjYjN0NEFhbURvZCtwcllPenZkbC85dSs0WHV2OWZYKzRPdm5GWDg3L2FJZiszNWVqRytlNkxvTUtENGQvOWxxSFRueDFYTno0VEFESDJ2M1h1ZnV2c05SWDgxcWtiOWt2NncyOGR6L2VlSEx6SDN6ci9COE4vY2E2YjE5cHVjWGpxb2VPNGdZcUl2SSttdnpLdzVkd0IxVGNRZXQ3NWdRWGhuV01ZK3AwVmZMbTc4ci9ja0I4S1VCWGs2UHZCTjFrMU1FNXEyRWlOdWo5TWpiTC9QUGptbGt4NkN4ZktMUFhmUTViK1ZyMkhUNGpUdTQ3aEJIL0xQUDN6cUU4WG5kTFkzZC9aN3Q2NFEzTFEzc1p3aXU0c1BxTDB6ai9kSFMzZkNyNzk1cGhCNFBuZmZ2a2wzUmFpcEw4NW5UOCtkWUNwN2dNa1Q4VnJSZit1a3J0TUZ6K3JIZ3ZKUHU1aEQ1Q2s4L2ZrbmEwVm1BZnRDM0R0ek91L1pBazhHcmZ4NWZ3U21sOU43K1RxdTRnQy9DT21BTlZ2cDJ3SC8vTXprdTJNejdZUjdDM2dkMzcvMURrYWU1OUlnblQvQy8zckY2b2tJV2J3ei9MdjFPd3QrNkVmR1BhZDZ1aDNnWVhBMTloYmhuK0hMa0JUZmVOTDUxTm5aNFFuZDYvakUwMi83SHpLWHN2dm56cTJham1CYWpuR0hyMlozTjNXVXAzOVFiUGN6cWVPWWFzV3pENzc3eTE2Z3JiWitlTlQ4c2xGZFV6Zk1zek1GL0dqNmcra3dOcUcrK3dNdHJWM2ZhZ2V2NWlxZmpFdDQxajlvYVA2aG1IdkRoQ3EyZG5JNC84TzlxcmpXOEVYMWZOeXl6UDJWaEJZbWZmM3JodjRxcU1IZThQdy85dHovY0J3ditoRzU0L2ZQM1VzZ0s4Z3Z0aTlldnBDTHZmZ0czdmdPb0hoQlBYQUZyMkxRTnRXRWFINlJmVjlJOGkrOGcvb2J0M1BRT3YzTmEwUGV2Y1BYeng4TzZwbkNRbGtIR244eE1zKytkSy8vOUpGajFNK2czQk8zUWZXcXdyaWFhRUZETWRIK3g1NktqQ056elFHc05KYnpnNHBGNTh4aGY1Mk4wTFlmTGZDcUlob3pXRVB2OTAxb3NKblJFMFBqaFdFdjVnR3REOWpldUQvNXNRamJqdy8yQnVxalFqTG13R0NkcU5tL2tuSURFS2g5QkIrTzFCVXovaGI5MHQzOElYNlRCREhNeHpkY0lCbDVNQzRRQ3hTbk90KzZkSmYvbS9uVTJkdmVLNlBrQ09zcEU3cC9qSjNtdGxwNTFNSHVJNXVSU2liazZVTklvUWdpSXYrOVMzWUg0d01URlpRaHV3aSsxL28vazlZWkhuV0ZrdXRrMzl5Qzc3LzBodjhoQVhYelgzYnN2TUVQa04rdjNUdmYrNmlzNEpNM1pKLy85UUpRZy9Eck9kQkMyRE1ScUFQWGJCRENMNDFIR092QnFuaGdmcjZtZjUxVGRQZnV0MXZpSDlRZzEvcDNtZnFQckk4V0Z2RER6cmZPcjZwMHYySGIycVgxbzN1Z0RKNmZZMm1lcHIrNjFmMXdWQzdPcVhUdEVZLzNMOStwYi8rZWsvMXU5cXZkUGYxOWRkK1g2TlZDandNUUw4N0dORHZSakxxQTA3MlJwVHBmdXlVN1VHZitta1ROd0x2aDB6Nyt4K2ZPb0ZoZTFBTjh0ZWJQUHhsOGJKK1duMEp6Z0VDQml6cmRRVFdoTnlZQ1RXNkMzWFdoTG8wM3dKYUNIVmJDRGwyWVdvV1l5a3J4cFRwQlFTOUJWUkdESzJLVDF2QURrSjl4UHhxaE1PRFlJOTlYUlF1TTJjQmdhTkFZUFV2aWpTbFZYRUJvMmVlVEF0THJUZWx1RWwzd0xHREF6ZmhYV1hGMkJwOTlyV2U3bWsyMlBKUC9UWEg5azFOM0d3VlozclVWa3hQbFhoWEZlKzNoampvQW90NTB5YkNSV2VGOEdYci9XcUVES1dJM1pQR2ppbGxOYlRBWkhyVVJJRlNXYUVMUXJJR1JlSU9paVA0R2huWDRrYjMyMWVKT2hnOWZ6dURVNml4Z2dub3pXRnRqd05GV3B4a2NRSFJHbWZPZ3BiRGZqTGZ6RDRmWlhyc2o4aThubUpWN3R2VGJEMVVwTVZsWmdzSFdaejZpcmpjenFUdVlMUlRRbzJtdGxwUG9BQU5kOHFLb1ZSMnM1WHBjeGYwZUFpczB4YWRQemVKeDJLRXplN2tnbkMzbGFVcEpQdWx0c0FlSHhSNnM1MUJ4ZFFtQXN6dVV4WDdEckNGQ3dqN3J0WmJVQ0JrQnE5THo5VW4vT25GK25yRWU3YndNenlXSXZaM2FLOGpKL2gxdG1LZ05pRjdIKzEwcUkvSStqYTVNMlhpdWJhQ01KMXo3TFRQVGFaZHplN2orMFByQnpUYTB5RFF4UEZCbWN5MzZPNmlmZUY3QmJRSk5mYjBFTTNwS2VoTzZUNGxpL0FBd3FHMXRnYzdSV0NPd0ZsYTNLZ3Z5dUs1cTBqelF3eVRLVHh0RHZvRW5wUVYybys3NVZqaFBvTEpselhGajZVdTgzMERsNFBweU56cjRoVEtQZDduV0xTdllUQVRFU3dJRjhDTzM1UVZnZUdOTGZpS09MNG9xLzZMTEhZaDZDR1kzeUJZMmM3RXIxdlZXUncxaHpGMWRqdmdIUDhBZWd5VXcvNEp3VFRvK2lkcDFUOW9OQTgzYUEwVHlvcnVFY0g5aFpzRXYzSVRIbW9TNDhzU0Q3blI5QVRzUWFCSXZLdElPZml4ZGZIc2F3Z1dWeHk1cTlYdW1Sc3gwSmpnTTltdWQ0TW5YaGhNTjQvVTdwa051ckl0dk9uc2FhdlFBc1d4L2FQQ0NoZHVSQVZhRHA2RFg3bFJmNldJWnloTEN6amI1ZlkvZUYwTkF5MWsvZ25vd1FHd1kwcDlwQ3dqN0hzNkt3VFIzaTQ2TzZaMGFYNlFSWDZIWVl3V0x1S0YwV2YyZUtkTXBvZzJERGlMckZXbXpTUEhtcFErR1Q3TXdxKzdkTTF1L08vbHVqdmQ1T0NPaFRiSG9qUG1UVlhzWDdqUmRLN1I0OTNTSHZ1eTJIOVRKTzQyZUhqcWZ4ZWVOZy9jRTZRNHRtc2FLNGFTeFFCeTdOTldzWVVleDNZOXpSRW9SWnB2RlhzUVJ2U29PT2QySlF5M092dDFLOXViclN3cHBpcWVUZGsrdzluVzNYS2pJZmx2REkvNmlubVRFYXpUWTBxbXR6SE1VN0xFSTd3NUtoWmpHU3NtMU1VK3hsTnVwQmZna3JubzludzdXM1VQV2ZpN1JxZTRVYmYzWS9BRm5rZldjS3RJSm9abGJyd1liNkF5WFZMQzYwb1lWdURQTzlmNVEyc3N3YWRqaENsTWF1ekFWSjZtcHNhT0R6S05hRFU4S0QwTWs5cDhUQjFVaVJsTXcyclkzRkRDU3RqQlJ3S2YzcnY0MlJVNGZveDV5RW9ZV3R6bzJ2aDhIN0NZN3VUd2Z2TTBlSktvUHJQZWJLcnU1S1RSL1B2d2ZqUzBaSWs1eld4TVMwTE54amh4VU1XdlJ6eld1b3Y1bldZdmZGMnN1RGM3eDFmOXVySFFXZWo0ZmphRFNsakI2K0VxYWEwcUliZ2hkNGw0a1N6eXBzNCtIY2hlS2VzWjAvK1VGdDRPbS9pTUEwUUhkSG9jS3FQaExuUGUyNWYxc0Q4ZkZuam0xbjAyZW42QTc3dVNMakVRT0FzUDhYYk40VVdOUG5jMWNYTlF4RDZtSDhvb3k0ZlBsNGh1dlhIaC9NLzY3em41OTJpNEZhanhhcjJETC96RjNXNVlJUVEwUkRDTDdtdXJJaHJKd2tza3o1amM2bWtyaW9NdU45RTlqVDF0TlhhQTF0L1hla2hteEhlejFSR2Z0eEI5SkhPTXJIamVZVW8zMFgrRTdxNWp1UUt3Z3gzSHdndWlGY0R1ZXBvOXBoUnhlY2g5VS84Zm1lUDA1NTRqZ1FQaGtML1RHRTRxNUVWNzdDdlNsRUl5a2l6cUNQK2habzh0alJYSU54Q2Z5VEtMWnh4Yi9JYndHOHlYeE1VYmtqbVJyS25iMEl6Z09ZTDdSRTQwTlZZSWRiWnJhdmJZUWZJaWdWWDRwcXlJSFBNbnl1YWx0ZngwR2IxODVqOHVxNWZ2cEszTVh0ci96NURkbCtJWkFvY1BaTEZ2S3JRUWNtTmh0UjRWNUJCMDF4TGlXNHVqSnFMMThCZU9oVEVNWEJBZDVTWUxWeEhQZnJ3ZlZaU1JqSC9RMmJHbk9mTXR0OE55SitHSHpXZCtsYzlsNWNQdnE2V3I5Z1JMRVJlVU5tSWNSVnErUno0NmNxeDMwZWorU1paNDkvdHErdXZNV1p3VWNYN0Erc0lrNGl1SjNzRVBPSXRKMWdsQzVpTmcyY3ZKV0UvOTcveFRyWHlGOVFnUWZveWVrdVdkb01lYitnVGZTeXl6dzBpK054V1d4N2p3dXVMSVdzV0ZxNFZNQW4vVGRNMFA4YjgzVDRPVk1NenhzTEkrVjVETjNna2ZMK3N1UDM2eG1LaytZZ0paMm0xMWRyeFhWb3pKc1FyVVF5WlF4WDVYUjdvUHF4eUJSZUMvTlBjVFhISVQvc2l4VTRTN3RDeENIK1A5NnY0NTVTR01vdlVRcm84UDNFUTNkWGJoeHJnUXladGJqWmEzc3JQYkFrYzRhRWpXRElkT0VVNUJUM2w3anp5bWZ3eThPYU50VGlkZTg4SlVYRzBXWTRtQ3l5cThldDk2UDJTdEpiaWQ5dndNcko2UHNzaVBaUEZzYXZZaVI3ZUovZ2xQcnl0UURiTjVYZWJoQm42WXdPR0duRjlSVml2QitUTG1EVHU0NUt4aDIza29RMklJM2M3cFlNeDNmang0V1c2NjQ4cTdZZ2U3OTlHSDA1YXp4eWN3Nm1PYUErdytSRGd6cytGeFJ1TTd3Yks1S21LZXVrUDNLUmQ0U0Nydjk5ZTZPSDFUMlhHb1QrYUg0bnVZUDdOMWMwRjh2K2crdjB0Vk1JYlhhMVhTYmhzaWVJdnV2Z3QxZHJ5VEpkNGs2eEppRzBSS1UyK0hhWHdITTFFNUFrYzNnYjNjVGpQM3dUM3VUaS9yTmpJZjRaT05jSkNYcy85SE42aldEUmg4YmsvSnViMVhSL2lMNmdZRVRwNVplRkJZNFQ2alMyNDVKMmVYRDdDTXN1cEdzaEtTUTdrdGw4cXUxdk5mQ2s0R08yNjhnSEpQQ0ZXSjczTmo1cWl4OE0xWU1hNHN6YmV5TFVETlluYXF0SWhoSHNtbE8wVlVURjA4VTl4azRTSDZRTzd1Q3B5d2tPSllIb0xKRk1vMGhvV3RMQ29VZ2hYMVlsNjR4NmZEL0cyem4xbE1GOUNiVzNYSTR1K3VLdlozaXJUTjRIYVI3M1d4RERjVEkvN0xZcm5IQXZiVWxFTXVQMTdwSE8venZ6dk1CVHpsN2hqclhkekk5RFNiaDBiR25uUmRQNzV5amtYYmpvamsrazBROHlWaWc1MkdzajErdy91WkxFNUxzWC9RRUs5bTRWRno1dGJ6cXUwNU1wNkdkRmlrZTB5dy9mU2lzOURYUnN4QkVRV0UzOVRNYXFYelY1L2puL0Jmb252WlN5eW5vcitKUGFqcWJncG5LeUZZTkIxWjRxRk9qL3ZvUEZQNnozbTFkb0F4L202U2ZOZktSOGU4YXoycG5NSWhPQ1ErbVkrMUVkVGJGUXZybWRsS1YyUFBXUGZqckN3T0xycXl2WEJsYVVwVjRPRkpseGF1Z21pQ3BKdkdpcHpyekxrbUEvUXZ1ajAvcFBwKzM5Zm9oYWtOc2Mydk5iMEdFK0dpc2tpSEVIcXl0RU80azhpdXBmc2VkUkYvWU5FWmNPeWdxMDhXbnNKdUlqdkR3dGVsQmNJL1B6cjN3cjZhN1E0ZnNWYVZIVnoweVR6aU1UL3FVeFF1NmxNeTF3ZjVFb2U3L0I3Z0s5SnBwQjdSSTEvZUVKKzlTcmVMOExMbFV2OFNPaE1pcjF2REFPRjdZdi9OMi90ZkVqL2dpTnRPSjNrNGxub0xXdTRPcXVYK3JGNWQ1ZC83R0wvZUJiREMyd3pqTXgvSjBhbjk1blhGYlJPOGwrYmJvajdRZkY1NTMwMEc3cks2d2xYWXd6RDJQMzdQak4rVHo1K3pNTGpvOXVMMS8ybC9Kd3N4ZlVZMDhnbzhGV3dPS1cvZTlBUkxwazBUNGNGMWZyajdzKzBxL3hiZVdOYTU5VjluVG55dmlBL200Q1cxV3hOODhjQ0Vjb2cvVG5oVDJhOWJkY0pUNE5FOXprSStkMVl2UkZaNkQxOUtiRE5ZUm9ub2JFcVBCUi94amJLTk91YWgwK25tVnJyOHMrMHhqMjE5ckQ4RXV6N2lwWUFkSEJTeFQzMHZ5M3ZYYUNFYTMxVFlNU1d2K2hqV1lsdHhlaDYzbndHNXY2NnQ5YVk5V1pydXVCRy9YRlA4NjNvM1h2Q3JZWC8rdURzWDVld3JPaldyOWJpdEpnNUNaWVhPVkRrQ3UwdjBFNHRCLzZVMEtSLzM1bk1UeFFNMHBGNjJSTDRCRi9jNDYrWGV3YjdzMGZadmY4dUcrYVVCZHY4d0RlZ1plLzlMNE1FMHhzN28rY2RuQzhuazFBTTNXU0RhWjZ2aUdXTDZ2ZTRHQ0M1bGNlRXFhM2Y3YkEyaVBYMzk1MmlINk13WTdSUExUWVN2WXRvYSthUFEvUzhQSThzOXB1ZkNROFdHaHdwYmJFd2Zndnk3NDY0MldXNW5PMEluWXZ0YnhtNkZ2MXYzRkFpY0taWkpYMGNNQlJ6aElJZERlaDR5WDdrSkg2cGlkNjJMaXExSzJ5MW5ZZHRkL203dzMxaCtQajV2dlVkZ0M2YWU3aUhlbTRudVdMZXhqUW5kbFFsQ0JLZElIMFR5SWVaWlJJNFlNYjRzVHFFMnVuOU96NHphS3F4Z3EySy9Bb2ZJL25MN256Q2hLdllweFJwYVUya2VUS1c1eFkzNmoyUjhBcXVadjBWRm1sNVVFZWsrcHkyd2haT0dZWHhvUFNPZEhuNjEwSE1keTdEejdlSnRUczdKaHNHbUo5aUtEZSs1RVJma3p4L0JNUGtidzNqb1BpOTdVNGpqWTFqRWR3VWZoSXlONERsM2x5ZjNuN05lSW1QdkZGSHhOTHZFQnc5RWRoNGNaaGorRis2YUhWdUtlTDdFYTJpTyszQ3Z5SDRKUEIwdzN0blhiYjB2VmpVOXlPa0xkdVNEM2NZNHNBZ1ZjVXdwSzZhcjJkQldzVzJnNFd4QzVrMmp1eWVON2tQTjRTOHRjUU45RTJqMFBZa3YyY1RqYzJRdGRYdkRPTEh3TlByK0llTHBNYXd3WU1KazRBV05nWFFWNmdEbzdUR0MrWWNyY3N3aGVpLzJrOVRmVitRL1UwWmR5NGp1TFN0RGJSSTlIdE5MRTB5R0IweXpwZWxCa1hpRTQ1NFdEazRZLzhXQlRlNnBkY3hQaEV1NnA3TlozU28rMC80QzhZMFk5cUwzdHpvN1VHU3g2K2ZHcUtMcEtkMW91cjhrQmxZcndQZ1ZHRTYvRTVFY2E4NHhUWm5NczN0cityNGVicXdmM0VkcFBkMm11OHZBL0RLR3hYSk1rcDM0Vm03WVYrMjVYS0ZmVDVnV3k1TGdJMzZIOUVKanhaeDFjZXlyb3VKaEc2M0VuQ0o3MFdFRWRZajRpQzcyMzhqM1k0cDdsQzhjaStuMmhXT3hiUmZiYndFOVFMeGlsc1hIeE81a1E2aXgvSVZqeDRqLys2cllSVExNRHZ0OUo3eXJTdlB0YzhwTG50WndqbmtQaVlYQWNRSGViTnVPdnViMWlwVGZGZncrcVU2OEdkQ0tOQTFWakZQcCsxZmZ2WjJ2WUJrWTA2N0lOa0w0Ni9EaGU5YkdYdVoxQ2N3MHJiY29XMC9aV0dZb3h2UmwxbFRsNDd0WmpqaGZjbU5XOCsvU1BQSDYzaSszWFB1N1FxNVpWY044NGllRzA2T1d5SFQzendLOWllNTRRYjZYbHZpdUNRL0EvcEkzV1JJdXlvcTVJQmprbm5KOElKYWZFSC8wbGNrYzJ3RTU5dXhwSXNUK0VLVFQ2NnpwZ1hEb3lzNk82T3RQL01zbVpCQWZ4elkzRXRPK083VG1tWkV0ZDJNUGZHVnpGUThTMmlibnprQjRLY3FYTWR4VzA3QkVqMXRwOUJtdTM0VXJUQjFNdGVJVkZURU1KWHJZaWo2aWNTYTdMWkFFVTJOajJhWVVVMGJrTEJMWGd1bXlMdlk5bVI1VG1HWVIvZUJOUmZwMnlGQmF5RUROV1hTQmpXM0hwajVpdGtYZnZEeGlvTUhDaXo3QmNJVjBMMHg3RFJFZUZESUdwck9xdE56cU5LVFVTUC9RcFFWYUQvWXRySGVERFMvTUQvckVwRnJDeTVWWWtDTGNaRzBYcFc4enRDMGZmMUtPVjhqWlJuSjZjem4rcUpHR2xzYm0yUDRSOFRhdGgrNDV0NlpVanIwdTE1b2NpOWZZNXlianJpeWVQY1REbEZIQjc1UG1CZUc5ekxhZXBLd2lla2FUY2ZRUnBtdFlQd0loZzNSeVU4Zit0Y1VSMGI5VlRtNUk0TXBUeFBNT2hJeUpZRVpqWWFCS1BKb2Z3UUdsc3ZEQ2pVekxpR0lnVXg4UGhoVnNTMzVldGRUQjZtTDgwM09xeTZ1NmhZZFc0S253SGV1VU5vN2wvQnJMR1ZpK0lQVEMwNFJGVjdFVnp4Z05yZG1xY0plVFJXNnVtSis4dkZFWkdXZDRXRWI2ZU1UN01uRnV4VFUwK1EvNFE4U0xTM3dzczZZVHNPRkJaK1V0WndtWDJVcTRZTmd1NmxWTk11REg4OTZyL0xmcWppSytkZnVkMU9GWExiNWhtek9XR1lYVXZoQXFZdmVvNHhnK2RLYWJBQ1JuV0xRZHRiVXpZTDZjNm40UlRlR3dIN1lJTCtPVExFNDlqWVdVaXVCa2wvOTJCaFA5Y3ZzOG1VS0ZGdTU1dE5iUjBOS2hmNXF0b2Y3Y1BZTloxYitSRHJKYm1JQWRXNnA0OW5RV29uTXY3RCsxYVR5dm12bld4aFlvWFpyR2ZsOFRUSmhRNnlFWUlMUUhzRERkTStGVk8wVmlmSzBIQTBYc1U2MWxhbFk0YWV5Z3I0bkNRUi8xOCtOVzJHNjQwUlN0NVRMcnllZHJ0cFYzN0FIUnlwN1dtKzRCTy9CVmNkRnZ1dzhrbCtuMElGUzdjZHhMcTcwazh5SGVQclA5KzBpL28rZDE4Qi9ETjV4Q2ZTS0VXbXdibEJBOER4Q2RpT1JKeHN2QVBiR2JzSU9kd3NJTGNJUVRobkY3MmxXd2I2WXRQV2VPeWhQdmdkNjBDeWE4cDlIOWtTN3lqaUl0RC9uNXlqUytEUHZqNVVxSTRiMS9tZTFNRS9zczRuUEg5NXZLYlFEUkIyZUo0eExJK1ZhY1VZRnVWMzRqVHFIT1B0WEN6Z2ZDRW82YnFZZWZxU1dMODQ4N054eHIxRGQxaVhlMTN0UXpiQ1F2RGc1Rm1LcUFRYkpPZTl6VldmTUliUGdnUytodTd3L3F4WXpzWGlWY0s4aEtFWDhhdFZ6SG4zY0hhYzVIM1Qwa3VZTTFkMkVOdHluZlJyTDMwSzJnczh6bUtaMGJoSDFPbHVaYnp1NURmYUlmZ1IwZ2ZhdHducnZ0ODJRQk5VbUJZTGM0YWhLUng3aTMrd0dPWDF2dkRzYUkrTlRyN0lYWUxwVEF3ajNTVGJ5WXJzZSsyNXZwVGJMZjFLLzJFZnVWYllHUzEwK1JqT0hldHJZQ3ZDUzhOU09qa1BqUlBDd3Fra2twWWo5YVk5TTRWL1g4bFNMeFhXRGY0L05JYzNjWUQ0UTRUOERTMkUydEhwM0o5ZkZBZDBHUkhJVFNlWitKdnkreHdXYnlsY1ludFhEUEg4UTdQQ1dESTl4azBRVWsxaFRuQkVVNXRZOGFPNzRBS3JMYlhkL2pSWmRJVERXZ0tzZElZWURjMXhGWVExZVJudkt3bnNGTFZWcXNvek9POTQ1a1dZaHhLTUxKcHU5TGVHM3RXc0hxODJyb0Fsb0lrQnk5eEw3VWNZajIrdjJOMnM1WDkrZVhVZjgrOHIvWDJSRDJlZmtMeisyMWxyMHd6VW4yc1FVOTRVUnltT1piN0xNZDQxaW4yKzZreTVnNmEyNnljVTB4SGlBWjRia1JEdUZsMCtOeGZBalNQNTVYUTB1ZlRMdktpdk80a1lsOWVjOGZDY2NKdmw2amxkdDMwc3BkVzUyOTBoK2J4a3ZpV015amp1Z1l0anRqdXgyV3VRbzFQckoyKzF0MGFFK21CU2FlZytpYmlVNTExUWFuaWd1NEZCZHZXazg0NkpPY2JTM2FYNTZHWnYzRVRXZWFqcE8zdVR5dlNqcDlidjBWK21DbDNsbTFIczVPL2wxUkh3SytLWnZ4bTB3UHVwckRaKzBKaDFxL1krM2R4M2dVM1hXRkx6U09hOEF4RSt3Wnk5M28vQUV0VUxGL1RMRUhvVXdMdVRnSUJCZTFNVTg0ejJFQjlXRmJ2U1B6YllQdVdSZVRrZlZGYUwzcEc3SHJ4dkVjUlRyRlpIbmlVN3ltN1A3cnowbTRJRjZ2MFh4WHBySCtiWExzMlFPOUpjNnZ5KzRERUp0a29ORjlUMmNINFMzeERzbGNXZGt5c3JFa3Z6MjZnM2p1dkYwRzg1SU03RVl5ZW16RHJjejdGeTdLUnJoWHBRVzJ6eTRyYk4xeGZGRmovUUE3Yys3U1BKRU40cnVNWTN1bmJEOWF2M2RVeGZzdFo1MnNOdU85anBnTFlNOGVrb3RtVWZ4VVRrWXNuUkdGZFVvaUN4VitHNWtVWUU5a0xhT2xGKyt2TEU4bFBEN0ZyMnZuNE1SNGtjZVo0bmtRRzFPNnYrOUVIOER6Rkg5cm9tRUYvRGs4eC9HVmsrdDJKNDd0b3J2ZWFKUjMwZWo3MHJ4TlBKNlA2ZjJraHFhaWN4QUhsQ0xvb1lwZ3J3RjNnQzBFV28rSFFtL3FrUmlid1VHeG9hTkwwemhQSTdickM1dmRLWU92OEtDMGpDMnBYVmNlejRoOWpSVWtZRVBzcDNwNW83WWFDeS9abk1vRWxpZUZzUkJjMThGRTdpd3ljRlF4NS9jVlErQ3pNUDdNRVVKdE5OemhlQjRjWDEzNEZza3owdFRuTE9Zcng0NVBnTnpiTG4rK2lJN1Z3TU9FUDRyaU9ORGFmbFBtTlhYMjgzaWRLMFVjNzlyQXdzWVdUR1dFYzFadFZkUzdJTkxEUVJqbEU1SGFBSWt2QmRHdWxuUTI0ZDM1dWJpYy96bjMyNlF0SEV5aExDN3h1MVcyNDhMZU1uaGFucThNQTNqc0E3N2YwUkxUUTBWYWx1Ym1NSXh3NlBlVW51VGU0Vys2LzNnOWxiU2dOcTR3S3BlOWQ2SHhKVlR0Zkd4aFMxNWxRazFpS0dOVjZWL3BBbG9ZWTU4Z29nRlVoWTgxbG8zek12dERSVjJuMkg1VWxPM3hubFVFbzQ5dTBRLytuS25yODRCd09ZN2plZGxtYkFPdFpNOWNETTVYanUzam1Gbk5XVzRYTVl3UWYwU0wrS3NLM2gzSHV6blRyc1lLbDF4TkRNem5NdlNLSGV3MnRQQ21TMU5QbjhDbFJwODl1YmZMNVBuZVlEdXFzRm5PdXN4UnllUlliaUpiYVJUdmkvaDVnT2lXdXRGRERlbUtGemZpOGRRMlp3czVrVE5HdXFIV0U1QjhtcHo3YkVWcVN5bmlvb3Rvb2lHUmRhaWljSW40TDYxSVV5czd0aTR0WVBRYjB2T091cFRLa1pseGY2UitZMUVHeGZNaXZaN3ZUWSs2eENUejRETVljVlpwUGRMOFlaVGtGMUpibkZzcnpSTVphTGFLNjNBTUVBMitONWFaOGFKOGt4bUNsY25VazN1NTc5TGFJYWZzTjhKQm1UQkhGZWs3MmVjVDVxaE1jdDhuK25GaFBUSHREbVNKcVRsNy9KNmpTTXZzM3o2U1JiTjdqWEkyR3VBRGZWZTBsM0c1M3hML0J1WTUvZjNMQk1jaVhqM254QVpCQzVkWkw4b3J5SjFUWWlOS3pnL2h0ZXpreDFGb0liY256RXVHMlhNbHRUdlFPek5pQzU0QWU5QUZrL3c0bk0xN0FPbWh0aEFhcS9iN1FESXRZQWNlMGlzUlBpUjNOVkVnc0tkNStHTjFtRnNiNGMvWk8rckpFdittRHQwWUZwRitGdU9pc05tZGkvQ004UVRZOEMyNWw5cDVpL0h4TFhpTVpqbTY1V3gvRHF2SnFRN1BxNkdMU0lBKzJWV3llRVJLZU1uMFFJOUhhUEZZRVhMa0phR1JHWE4vRk1LYUp5K1JLNkxnaG92Q2N3TlBzNWNQM0ZPZTlTMlJ5SVBGWWk5TmYxZ2pOSW5DenhOd1lpSTIwQ0xVTkExUnhhSGt1SVFNS3h6MDBaQ0tSZG1XSWRnMUlWaUVSSUtlWUttMjhLWkhhNXl0bUwwcTluY3ZGaW0zbGpNRFJlQ1puVGVyeGxlejI1eDVCYlBIOUo3akVOak11SkZhMVM2OE9EWTVKS0cwSWJxUGpTM1lHTVF6Wk9zbGRxMDF1S3h3bWtxTjZNR05TQ2pNOVhWVmlVVmNkZnByUFpyWmRXalZqRFl4OVYvSUVwTkdralNqQUQxZmV2R1ZQNmJmRC9QU0ZwRmNvNm9DbFJGM1I4MVdQSVhxbXVCcGZORHNBVVdPdDMrSndWWE9Wd0hJb1VRdTBudkVISEIybXRpbnVNZGxOU2VQby90amJrUTA3L3ByU2MvSXowVXBWOHlWR2E5aHY4SzlQcG1heTBocjFzVHhLY21jS0ZnMnJ1MHRNMStTdlZRQXQzZExRUEU0a1VYa3FqUmJ0R3dRc3BkSzNMSjQ5clVlQ0FEZDk1Q21vNCs2cG1iM2p6b2JhWW9YZDh2WmlFUXZJQmRKdlZPMDNsNmtvZVVpR3FhbVp1dVFHL0Y3UmRyNTNJaW44VG5qQ09RYzYwQlNOS3VLWjBncTNoRU5Mdm9PN2ZNaE9qOUs2MEpURTVFR1I5Z0VJcDNwZVhPMVdRU3BwU3lBeGlyemZZMTFnYmVoSDF0cnlEMFBkeW90OU5GNXZWak0xMHpsYWdoVzBXOGxtSVNCbHJXcXNicXYwVk5UZXlRVkJLSnpxOEp6UjJNSGxpeWVjSVJXdk9keUZPc1VhQmJXU2xQdEprT0drRGJTTUVmQnlwR1M2VmhMbFhyRVFwSnFOOWZaV3NIcVpIRWpQdFRvQVZYSjRpb3oraEFOSk4rMDF2WnphOFlhZTFKWnZBVzl5RnRSTEtTbEQ0NzZxRXByckt4dWdHRGdDSkx2cWl4Vi9FVmh1YWE3Z0ViRVpvRXp6OUNNQmFYMXBxWkNiektWMHEvUGs3WGk2cFBGVG42N0NtOFVvSG1TdVJiVHNoeGViV3Z4NmdxTVZlOXJoTE5xSTJ2Qk5OS2VHL1psQy9jUmZRd0JpVktNTENyb2poS1l1cStIcVZacmZnUDIrS1JzWWo2bmVGcHNvU08wL2lMM3BpWmdoZGZZa2lyUjVKMjQwbWxLbTlxT25UM2pGbG10MVRTSFJFVWpmcGQvSi9LODlvLzZLQld2WTdyM3ZOcHRuOUhkVFBoK1NwZVJWb2ExbzZ6MTNrazBKakoyS0l0OVIxa05kOEFSZkdVVDAxTk13OFVNZmQvcGVQK2J6TDFUT2RFeSttYUdhUHhNNmc0aVBuQkpOS3hKMXJvU3pTZWtkRDhMcThWSVVZbTl0L0xuS3plY2IxeGRyWGlQVlR4bStVUGpaTHh2bHRHanJMWmpJNWhWcEtlSWY1WG9iMThUVHlXUGJ3a09JNWxtUXk5Q1dXSmdMTnRFVldieG1pUHJhTXZ2c3JTeW5yYm5vOWRJWkVkNWp2cHF5RWc5YktBeGhheUE2ZVU1dzh1aWFIMVBzMEVqRFkzZVd5a2lrVHZMWjNQVE54a2FOYnlaYnlmNEh1TkJNUnZFbWJmakIzYnB1MjA1ODdLZTF4WXpIZkMrNnVodFhPRW5hK1hKWmhwMEJ4ZGxQSWoxbDZ5RklyWitZTlh1eFdKT0dyM01WbUtsdE1raW9ibkY3MlI2L0tvZ1dXM3RibWM5eFFUV0lOVEYreU9naFRkZ0N4UUlCeFVadTBuMFFSS2hNYU1YNXN4ZWhCa0x6UlpuRzBwVENPQ0EwdWdBYW5DQU0vWmZyT0ZSdDhmaHJEZnRhdGJnb29pTFVKSDR5NHd1WitVbUtySVlxOGpMbzg0TzlvcVlxemJiZ0xNbHZEZ0JXN0JWeWNSZXV5eFA1VVlNcnRZaDlaaFFFUlhQZUV6bzdJK01XUTJUUk9ZaXVsYnR2VkpiUUErNndGNUFpVTcwdWEzWUhieGkzVlBJMzQxRVoxUitJYnNHekF0dzVIdVVQUjdEZkgzMWxHVUJUc1FGRmVuRGUwVVVUdGw5ekZaTWJHVjdUVHdPRnFOSlhTd3ZtbEx1WGhldmdCM3M0djFJOVBnRXhzVjl3S09VeVhpWENtc0J0dUFvMGpiSzBJM3hyNklUd3I5OUQvaE05Vkd1QWgrQ0xSM0dzSlhsWjZYTXFIbzZXNmdrZTN0bVRoNUdNWTE4dzNhSE4zZXIwZ0lFd3grQXd4NXpqR2dWcnV5clNOTlhIR0UzSGh4MHNZdG9XdTJaY0crNE1xeFYrTjJVZXp6eGxMRUJWS1RoMWVqbVcvK3VOak9SRHZTMUZsd3NHbFkySWtIcXZpSXFYVzI4Z1BvbzA1aWdyWlUxTDU3a2swQ3VPQVg1YlBMSE1HOXhiUTZXNFNGZ3owZEQ3RUxONFptYzJTSTJLN0I1MDFYR3NaaGhpVGVQZlYxVi9ET2RtZTl0c0pPTUU1SFJsc1UvSXROVHh1TE1RQm1iN1pnTEpzODkvZ2plSWpNZW15OUNrcktMR3l6blZjVUljbVkzT1RiYmhBanVWSEZoSW5RdkZQN09taFJPR2d2ZjVFMGNyRW51QzlnQ3JVbzRvWUpUSmF5Szk5YzRNYktodUlJemhib05NVjZzc0NOOUVCb2Jrb0RkS3VETFdWQUFGekxXKzhrNmVueUk3bExwN1I0S0FRWFZ1RHVabWpvck9NWXFUdWlqOHFKbXhtd1NGN0pFcWtYbDJhUnpSNDIxaHRiR3hxS1ZpYzA3ays0QTJBTmZRMkpoVnpnaFBFVndvK0drNXVEWFdsWFdHbVk5QzdHcHVPQmRTYzIrTlFtaEo0MnV3Zk9JN0JaTWx3V3hKbFhSS3ZmT0RuYUZ3cllGT05zMm1IZkpQRm9KemovS2xMMnRGTlBxa3UzUlhyTEZWMjQ5aDlUMG5UUGozUmRGd29RdFpjd21nQlhlWHJiTnhRQndVbFlQQjBoa2t3SnllNng1NTRFYlRlc2FkcDJBRFk4NFlHR3o4R1ZwY2NrMG1hcFZzeXZYUnk5Y1JlUzdTTlVzaTJmTVJhWk5xRXdFSkZhL0VMTStVdS85OW1NMXJLY20yZUE4ZTN1NnpOWkRYS3hLbGhoVHRxR3ZTcnlINk1rcUg5aCs0R2xJWlJML3NtdFA1c0dCL3RYbU4xSjRXa2pVcHJrcTl2Y2czRVdCL2R0SzAxOGtNeVJleGpVTEQycHZIcG0wRVoyREJ5WGNiYm0zODBFVlQvK1ZDVmdoSnNJb1FDWXBYSVRvcUIwZ3NSWW5lcVJtb2hvVmxLMVo5OFhkS3ZiWUIvVG11UVMzb3dZMWZGSVRkUCtobnRMMDNyRTg5QVF2M0docWFmVEE1NnBwb0tsTC9GRVQ4Wmhsais2WVA2cTBjQ2lZRTdvNk93akk3K1U5Q1VROWJTZ2cxT3I3bWdDZDY3UktrVXpFQTZlYURhbGxYR0RHeHVhSDdCaGU2ZmVMKzN4ZGppT21ySlhZOS9TbkpPR2VtRVl5UFBLbFlyMWxzMHp1KzRjeUhjenplRG5qU3R6WUFpNmlPU3NtUHVlYVArUlZtTFplK1h6VHhHNGRiVXlTSDJaUy9wN2JyRk9yVVZIZnUyOVY3Sm9LdlRrb0xIUVVhVUVWK1FxK2IzSHNvUDF6enUzcmpjZkhzbDV2Z1JNSURMVCtUYUY1Y2V6bXByc21HQ09WZkdBcW8zNGhBZ0FHc3FqRG1jMTdDaTJRNE5VVlZ6QlgxSm5GZnVKZTF0Nzc5K0x3cGhJMjdLTWcxMFFORi9DM200bmdhM0ZqaHgvZFUzYXNWZTE2U203N05uUElHVnFSQ2NoOFJHbytvamtWOTVRR1BHNHdya05qc253WUZSc1NGRnpUUlIxdHZxNHdWelNlNnpoVWV2UHlQQ05xTzF0MVNaQVlLK3htSXUrQk4rcW9TUHpiakk3dStsU0JqeU0rS2ZZbDlYQ3crOFAzMWRCS2l2SmVuc0pGZUgrYXZRMFA4N1hibnovdVRyT1FPb0xvSERtckJzL0x4ZjZ5OGh4VWJIaVBpN3FYenpWSzFvaVR0dmhYSElEOUdDZm44elkzbWliRjVlZHJyb2ZYTnJvL3YyRHp5aENDOEdzdzY4VXduWTh5cXVicEgwT25jakNVTklWeWk0MG9BbHpzbVNVTmNtWmlYQ1I4UHBpUG9uTitmQSt1WnZnTkpBWFJiNElyRXJRWnpLUjQvRzRYMktkQndZeTNTLzQ5SHFEZkM4VWNrK0RUbFNLZWo3SzRQTVJ3SXFBN3JMbnJ0dUVYclhna2tROFlZT3VYOG53NW5iSENCVms4aTF5WXlZQ1l5Mk4zWGUzWU5YUTl3ZEZjdUVqdEdQYU45emZKdVY5dmhCMGk5d2oyd05mRkx1UlpXSkNuOHJCTGdvTk5xSXk2TzFYaUJtbURoeHR4ckxJZ2FCbUdGTEZQVjhBTzFCejU1OVBiS2h2RGgrRWpTWnd2dXExSVlHN3ArNUxNL1lFMDZRUDN5ZWNTR0l2elpPWFVxN1NqVkhBME1ibmpSaFIxcnBBUHdLTjN5UkFhQzJrRm5VTnZzUVQyd0twYVcrbWR0VnVpUFFRM1VqdGV3YTV5bnY5RVhDdWNlYWlJNDUxNlpVL0FGa3djQVMwdExwdko5Q2pibTc4dVh1SkdCVk5LbDVob1A0WEd5bFd5eUtUNERTNlNlc1IyMnh0aEJQUjRFemg4RitEQzhsUElqYWJwL0JYM1dueS9UQ3VLWWFiOFJjZE5WSVJUZEJjRjIrQlRXTGZQS2pkdU1qNU9CcjMxcktjd2RxMVY4Wk9xWktMNmZkMy82RDVvMG1CZFdFUkZEU3BsNkpnK3hYYzVrNVNqTmhFQ3BZckdzRjFzMDlqZ1pnanVka1lMbEJ6RzdtN3dYRzVDeG1COFd0TjlIK2xDdUJCR0phN0dvYkh2a24wZU0zZ2Q3N1ZHeHNtR0dROTNOOUtHb28zZzBFajNpUTFxS1V1OEd4ZDV6ejZyK3c3MEJDcytYOHd6bkVWWGhyZ0piT1dlaW1kTXZzRkptTjgxKzl6LzAyQy9JRk90eVY1clpkSVBvL2NGbWxrSUEyZ2JWcDRyM0YrMEFWVVZDNzlLbTFQYkVyRnZyUG83VmRSaFhGQ2h5bmJRWkNkdmJiTnBudGVxaG9Xa29XcnV6S001bTN3SzhSeWhJakZIUUVQc0Y4Umg0YlhGaW5NMmxxL1ZEVGZHSnpCT0NyajlGRHRNZVQxTVYyUFBjVUpxN1ZtVmNDT1hqdElONUdxOFNuNzdFK2grc3oyNVNiZTQ3azlGNytWc3cvUDE5Q2JaVEphbVR0bjMyTERlV1A5K1VueFoxQys1cGlzMyt1NGF4eXFjZVhYWVZ6V2VYQ3ZXb1NPNnhoWjlUWGtkRS9UNEk3QXhMdUh3OC94M2ZVb1Z1M0ZqNkp2bnVOWDJVemt1WEhpRzNXUTdTTUx6RHpqTTNrSTBBY0VJeVRvRE5IeFExclgyOTh5Ny9iVXFlZkEybUU5c0RiRXNjaUJoa0xYenhmeStuaGMzMDNRY3k0RHBET0xWbzF2dWxUUjByL1dIeHU4TDlUdy9XM3p3aHZzZ3pjdHFZWWpCOUJiMDhEMklSSGJjWEpkWld0bllkQ2lUTTc5bzlCbk83TE1uTzFNVDJCQ0NTMlN6elRlVk9pTDVEOUFEWHhFR3ZpcE9RMW1hZXRuazc4YnhuVFRtNStyNHhUSHI3RXJaTkk0Skg4b2JRa091MkwwTzc2SGR0NlpuSmVsNWlMWlcyckd5SWJVTjlyd0tleDJCbHpnbG9uN3NPdG9ZNHdHMkplTDlOSTFSZnlidjRYWE5kdmZVaDZDSTNBSFlnNjdPYm9MNG13WThJZUhFcERqTXg5RmFlMm9Dbk5oK3VvWkhDUDRnUUxKb3htWmRHYkp1ankrS2NPTTZHMjBRTjlydkhyRi80aFpaK1hUVnpwV043YXUrbndhYjNQdGhDVGY3SGRmWU5jbjNydFpiVU5qbStGZ2ZYOWM0VHVQWlk1M08wM0JqeVdiYkNJNWZzUWRVOWZud2IyQzhPTXAwQVBYSXhzTFgrdG5KdnZRSmYrSnBnYXE0ZHdRVGlFODEzVWNlWDFiRVZ5V0xmTDlTLzQzTzcyVTk3TStIVmZNdDNsUldxTEtwWnZIK0tOdkNXcVpOcU5YNE8xckk4eWRzKzlxWWFLMndtTEpYUEo4Vks1Z0ttOFJkTk5vekY2TjMySEJiOEgyZFhadzI5T0JOcmIrcmVyeThRcnZpR0JOVkhQczhLL2l5Qk5lS3VEaHFObitKN1J2VmFiVUZlK29HSGxTSjkyVHgvS1NJWjdPR0g1d1VhZXBwTlArK09RUUdBaHVTUWtEMDRLRFUySU4wRmdhS09PanE2WHVOc2F4Ri9CUGk3NnZQeTVaRjZPc1NlczhNRlduaGF2UjVkOXRaNFdiRFhXQUxHM1V5aFlBMmp4cGJEUnVnSjd6Sk5Gb2I3d0pidUtqc3dGY2VHK044Q3pac1lhMkxpemYwZDNhOUZYVFNWeVVGL2tmUUlScmg5cGxTSjdzcXZNYTg2TVhDRFZkUGxiUUt4eTRtOXNSNkdpSkVOS3ZaZDFOZmZzRWg1NVBRbUxDT041cVVQbUU0QkVkS2trcmNhRnVnNnV5UVYyakJGWm1Qb2VRZXM5Ym94VjZSS21KRXJ0TDVLN29lVzZBaFFndjh0YytlYmd0WmVKL202ZG11R3E5WUlWUkZVclJNby91N3B0ajVrcS9yWjlDaDhqNDJxdGlGV2srb3ZrdTJrb2JjTWo1YlJjZXFkY0ZGVjZZWGFQL3ZuYXN0RFdxVyt3cytwQ1JtVjZ5U3F3cStyanIvWkhPT1VBYmUrWWgyTjh3NUdwSW00RTg2MUIvZFN0cVQ5UnRVMDVWY2l1Snh0aHE0aWpqMmRkYjhTOGhWRFRvWkdpT2hVWFgwaDV4UEluczkxTktvQ3Q5UkxkM3NWYzlWOEF2VnhuTW0rRXJpYUdLNGJ0Q05yOHQwVjJuZHRSaWJTWWFQMXNCU0l4KzdzajdGSG52YVJBZ1ZvYVZjVWNLOUcyU1lHMmh0YVI3blo4aDhKZDg1RmRQYVpJM2hoOFFtWk9XeXhFZGNRZmRxaXUvOXJKaUR5QmU4SVg3ZnZOMitoRHV4N1RYUUl4L2dkYi9vc0RGZU15b3NHZW43aVQzemh2SHI2U2ZPMTVRV0ZKS0RZcC9sek03NHQydDF0TVFmMjVoclV6bCszcGRyTmRuK0duSUJPR0puR0ZQcVUzUXZkYkZyZVZ2SmY2eS91c1daZlVTTVFMa2hRMlRqYmVRWGhaZ0p2TjliNFl6YzMwVVhwODEzZ1hTNnA4RkJtK3ppYjlLelhyMkhUalh3MXFRTUNpa3QwZWp2TCtScjFQclJ5WjFHdVRTNXZXZWYxWDJYbkU4TXZ3bHMxcDV4Q25mSk4ra1ovbmg4VnRGbklCVG9hYTJ0L29vZms4QzBXSWp2K1RseFQzbWZXUnlQdUs3SUJhaVNyWk5DekNRM1NiaXZrbEUrTHY3dml1eEp3NTBpTGt6Y0lDZWI2MVRoNjgwMGswQ3dpdVBNQUN1OEVSOU10VTlRRlhrbzArT3dQaytyb3V3VGV5Mm1oRlFvWGVHQzEzR2VJTGVka3NiczlYYkNDWC9DUmRaeEEydFMwRDkzcHZVK2dWcjdZdUdlb3JHTE1zYndCcnlwZ2NlcTk1dnhDOXZlMTNFQjVueHVYUDYzU3pFT2pkbHB6aUtPKzhoV3UyVlZhWHJSeDBoV003bDRqSHdUajZMOW96QldyZDdMSDBBM2s5ZVRiZlpXZ09rcW54R0p5eEdXdW5qMk4wbHBuMEkrb0loOXlGMk5QYS9qa2p6RjBtd1pIS2w4djZyczNUdnZCeGNPMzlDQ3I0aElqc3ZMb2JqUXVMQ0FHaXU4NmV3Z2JGaG5oZ2Zudi9uQXRXSjRXWXBuVDVhS2NaeE0vcmRXT1pibUVmUjRSbU9oQ1dqaEk4OFV3Vm9rMTRCOHJqRGJ2eXlURWxGZWk3aVk5UDEzcksvQmJsbEIvL1AwK21wTzJSWGVjRi9aV0tmd3JJNGY2RWlYelRTQXlaV0t6UC9XSmphSzB1Z3p6RFFSS1pjSGE3Rk8wdmlxcXZ5WVlxdGkzNnVyQ2g3Vlo2RFV6ZGhXYkd3ZjdSZnluSlBuK1pvcjFUeTBRUTR3RlZ2QnZxQzhUSGt0am0xYmJxalV3TDlyYTNCVTdYTTBkV1ZwV280bm56Qkg1V2w4MEZuSUpHc3UydmNtVXdna3dRTzJzT01uUXFpS2ZXZVQxQ1NBQjRXQ2ptWVBRa1hrbjNRSk4rb2JHNGpta0dyYWxUSFZPanM0YWZUNXFQVGdUSkYyamI3cTB2b0UvZ2pZZ2EvUmVuOVZsek9WMXRKWWwycktsUFVQWEdPR2w4d1RhVEtRTFVkZDlSKzFOZWdBSXQxTWxwaFQxTHc3VjhhTjZEdW5yZFpqTUx4clBlNkJlNEtIMllpaG96MCtjT1BncHBoYnFRd2JTWFBWRzJIaG90RUs5VDVZd0Q0aUNKd3BWSjc0THBhMXV0Z3V1dFBGTTdyN3FVTDNqMWxZNFNVVDBUaFNpcXdxTG1LaVExWFVYZjNSUmJMUnFjWTJ1MXNtK0EwM2lqUU5LbjFjaEM3OWROaEtLdm1Qc3p6WnJZRVhKc0E1dUUvQ1BjQjVuWXRjTGFtL09JeVZaYTBHMjF6bTdOZUE2STZJLytJYVEycEpuMk1vcllka3ZJRmpDSXNUMFNzUmo4TTFqWENUaklvNk9MVzJ1NWRSczV5STVrTndvNHA5d3JOMmVpaUxDN2k1d2FhcXMwS29pZkFRMVFPYkFIdjhkczJIRmR2aUNyYkIxUGJFUnJhOXNCdmxvMndxWTMrYk9sN0V1U0M4TXoxcUFwSXBwckRLNXg2L3R4Ykhwd3FmZEs2alFZMU0xZFJTWVBzcUVYdFBzVkZrYzg1QXRsWEFnRmFrYVlqMHhDVEdTY3JiOTl2VlRpazNGSTIrYlk3cHFxNi9FSlhzck1ybGo4NzY2VXJNVmJKSEJhMDEwaDl1MHZWYXhGdGlPUnJiZCtwc1RXMzlPRkVNRnJZdmxmZWNzenU1aWEyMVRRMlVEOGhKenJWWWFMZlBuNVRIeEdSd1lWZytwN3h0T2Z0dWF6bnZnK3kyQlR2M3NrMTlsNy95bm1QOXUrVithL2R5SzE3SHBYdnI4NW56K3Q0UlREQ2ZNTFhxR0pIMDk5anViZDBRKzF0ak0vcVQ4Z1hibnZHSHdFdWxiOUFlbkRBZnQ4ZCtkVnhIK250TTcyNkp6NytsM2x2QjNwdzBkN3lXSzVTemVVdUZtbElWN1FuZTQvZHJ6bCtwem1sUUd1TE1BSXZyd3VGYUpmbzR0dGN2ZkZtRUZUSTU4NmF4WTAvYjVKb24zcmFXYkNjdk5GWWtFM3pFR1A5bXVZSzBidHJ3WGtrM3ZlSXJTYjZ6K2hkVjhtQlVaN1E2Wm9DR0QwcFVVN1RCMzl0K3pLdnhGa0c5VHlWdTZGeUJlOVdOMU9zNllobm5ZSzkrdGxYSGVqWDh3Qy9YTEs3aUk1R2MxRFUxRzlxS3RJajFrV0MyaXNyY1R4aHNsNWttT0ovaVh2VTZURVBWb2VIN24vMGpxTzNSVlJjNHdVUEZFZndOTFZEWkFLenFqcW55T1drM2x4VFIyMVQxNUdwSXlNb1ZhWFlWY2J6VFdPRUN3cjdacnZqeGRVTXB3TVZQQlZzWHoydEZXaDVVSEZoMGhxQTNQOGpsNHFqL3hpTEkzdFVBdWJwOWFObStYbTBLN05hZmUxeXd0ZDFaM0ZROHNwcFF6VVFjTU9ZcjB1S1NqUGxqTGZhaWdxMElYaExIMEhUejZHN1g5dUNBblVpRnBKaU1jSTREbGxPQnBycW9UVDNPcEh1Snp0dVRhUUVYZ3NrTFNreW85ZmlqVEErUUlMQlpkb2NaSS9ZNFZHZ2hTVXJKQnYvZGhyK1p0ZGo2YXZOVVhad3hzM2NIT016YmgrdzltaThwR2lxVWsyZVFncU96Z3plTlBqMXdZLzV4TTB5TklySTBkUlNKWDBaQmNPZjU0KzQwWDM3TUdSQW5WSGs5bWVjL3RPZks4ZXNkTWJraUNDQjF0dDNlanZOcVVmSGx0bjNkZmN2WjdnM2Z2NFYvMkhISDJ5eWM1YnJvSngyQmx4TGpyYVRGV21mSGxzWnVjTjg5UlhyYVBtZnBhR1k4TlgwWDdjdmpSbE5jUUxmUXBUOFpmOU1UVGpoNGRyS1lKblBTWnhQMEZrUlJlblFISEM3OGEyWnBTL0w5ekZsMFFVUWpWbkduWHlwYmdCblJtdDJXYy9oUXg3ME0wNzVGMDdUejcxcVhTQ0FuNkRLbXpwb2JRMkp1bWhzYk1jWjhIelR2TzR4N2lKQzFrZDZFSllOWGRvMXBJZURNZWJUaFlXWDZuWFRHTCtCNlhiZjdwSE55OUV6RkJrOWM5Q3RmV0tJeUdDU2FZMVg4dGdZT3NCR28yS3N4VXdnak9YTVNwSlR0OUorc3MzaDNWMkFmcEhlV0d5OVN5TEF4RElRdDFoUUhhNkh4SnZPMlhlc3ozemMzcVVqZytuUkxnNHAwbnlYWmlUUXNLQldzdis1c2J4anpMeUNQM1o3WW5hR0Q1TTduaVV5Vm9mM0YzcUQ1aE8yZkkydDl1SHcxeWZmcXE2UjlWUElzVnhqL0NtM3dLdWwydEFlMWlpWTNKRUcwSGJla05DZjkrOXcyUnU4TTdtSERkNm5QN25RU0Y2OWxMb0E5ZS9vVDdxQys1YXl2bVg2NFVlOHhkbkNKazVJVkc0Ym9QZko5UHJnRkY1bk5PYVV3dllwMUkxeEVORTk3S3ZyN3NYbGFreThXTTJ3b2hKNFl0N1BKTHdYYTJWUVFBL2RLcmVMYmVLMENidGhSbld5YS9KNEU1U1Z3ZHUzYks0bHFVMU9tQXlTWDFTZXdGTlpkbEdmcWdsMWpubFhuYU0zM2xpenc2SHJITDBrV3FYZjJSajJmdUpqT0ZQbHVjeEpNYmFGWUxLOUdUUUd5UnROMC9PYmlsM245S09tTDFxQXpOTjFoZFgrcDYzeE1aOU4rMk9qZmJXd0tHWHBDVmV2SzdnOFlraHdqT0xuNzNXZlBoUllJVzRqZ1dod25tY1FuRnVwRlhoY2JpbVFmNmhQOUNPd2dqb3M4eUJManBmMDNFbFlRdDJWL1VTUytwL1dtK3cwNzhGVngwUi9aaUNXTmQ3TEVtMFFWLyt2MGQwcGlKU2J6MjlXczJOUmlsZUxhb3JhaE9NWVhqd3RZN01NdnFuUlI3RVdoUGZ4Tm9rdStCMVhGV3VnU3Ewem1vVWhlWWE2MkpGWElOU3lJSDdXZzZ1bmFUU1pHNXFnODhSN29UYnVSbjJta2k3eWpTTXVDYVNKV1U1aWRERW5NTkZJbk5McnIxZVJ5bmpTYWYxS2xSYWhMREJZOWw0NndVMmlCS3RjdXZibjNXKzNZMTBUc0RUdlk4U3k4QUVjZ2ZwL2R0S3V3T2l6MmhQdEx0ZEwvdVNKMVJuUXN4eWtWVEJnUEJiOWltMzVUZWR5cVdvZVZJOCtaRnNjcHJPWE5KbFV0K2QwNmZQQzkybDZGWThTYU1yQTd0V1J4ZnBCN1Uwam9ZQVpmQ04ySSt6c2tOTGdLUjdDNWVMY3dBVHUyVlBIczZTeEVySXJaUEtVd0RzSStKK05jaEpnL0RPaTVPSVU2KzNTZWRSa1NKeFRGL01iMHV3WlhUdEZhanZyYjJFSXdQRTk1d0RLcS9VRmlnNFZvcnVWUGcvV2ZSOE90RmptZk5YZlVWaTF1RXo5V0pVb1UraE9lZ0ExcFZUeERoUmJRSGRpeWVMNG94RlhpYSt5Z3Q1bE1QZDJHdmlMcWtKY1diN0o0TnVNMm8ya1BLY2JVMlBOUnA0WGRraDZmWkhIcWFTeWtWRkhJbU1pSHpwSXl2d3ZVdllORnBWSU1HYldkMHBtNHFSRkluL2VxZktCQzVQZk12RWVUZHU0OEM4UHBLWjAzYm9XY2ZaYUpCOExya1pHczBOT2g4cFRHSE9WNTNwaFN4MmxiWVZ3SE9jbGRyYTk1SEtzMm02akcySWZrcDM1TS9GUVFxWHBMVWxmZ2F2eFRxeHpPa3BySDRqVWs4bDBleHNqNlZwdmxBOGNpSEZsZ1B6KytteWU0WE9iNmxER2hMdllaMEJVdVNCV0pjRGJVU1R0cVorTUloNlcwWURSbjUwU204TGtxOXJ0R25IdUdWZkhOQXpmU1YzZ2Nhbnd3TU93d0YyeHFZQVhjbTFVV3o1T2szWDloanJVa1hQVHh0S3Z0eHBjWWxvaDVKMWZiKzQxN1VvN0FubnJLaURFVkZyZGUzeUpleDVFMjFGdWxOejNxMHZDUWxaODBFUjVlck9FNXF5WnA0dmoreFJyU2kvWG1zc0RucFZ4NDh1MWZiMjJadk1xTlBUanFUNHFuc2NMRndQQk1wZmRiaVA5b3lSZnJYZEh2NytGN3BWOWtSVXpJcW42TStwcEhiZU0zaU5xWjA1UGUzSzMrOXBTUkIrdmpWRXI2MHBXYWU5VzBKdThlajNHNndKUGE1TVcwSEQrYmR4U3I2c3lmMnplNFRYMkdhbGp3UzJiWlczaHlWY3pnWDdPSHNSblY5MWxvTk44dS82MEc1dVdvenM5YUhPeUtzV0d0UWhpcTd5R3B5MHRNc3ZOdDNueGpRckFpTGROL1lFd3YwNHVZMU9yZDVFM0huSlgwTDgzazBqS0ZjUmJYZTZPMjM2UFZURXZmZFpaeC80Z1J3a3VrKytPN2lrMXdTVzJRS2JvM1JMc3dUTHhqUC9YemxQckFFdDZTOU5oSVpGK2N3d1ZCTDV0VGtaNzNlODQ0cmtITmJkOEhoMGxlVnFJakZuVFVJbTE0MzlqTnZkYmZ6OXZpTzhtWmkyTTVQWUZ6NTdZNHhkejNwZnY5eUZiL2V4Y2FtdVhvbHJPdGtoWGkrT0dXOW95VVorRDhobWRBRHc1TGFSckdOZU5tS3lwb1lSY05aWHY4VnJiekxQTjJIbnZncHpnRjhpRndIOFQvcHFPZjB6ZC9PcXJuT2JHN1R4ZW4vMVRFUlZ4TEtPRFlZdGhmMmpzM2ttdHYwdkZ6L1g1SmZIdHlCcHcxek9iYy9vaDlpNHpqVEk4YUs2d1VrZlJsUS9KYUxKTnprOGdtSTZIMURVSlY4c3lvbHYvK1pZSnozQkJQaU8wZGo5cEVRRGdZNHZzdjNrVjFUa01YME1MWXdIMFY0VUdoa3ZDMGxVYWZNKzZTTk02ejJWWGdHL3VqQll6YndqempVTTFTbUU2ajdCcTdaWlkzaEF0azV2cXdjSUdtTWYvSzRadHA2RXBPN3J4bHYxcW1oMzE5V05kZlZ4WnREU3YwdVl2NEVOakJaYUxEWko0MTJHQVNlakt6TTZHZlZiQndKVFE1SFVlNHh6bVc5dGhmQ1V5aVV5bVNpY1kreU9KNXVwbTAwcWtheHJ4Mm4rMWhTNlBIdTZVOTltV3gvNWJ1SGQzaitTaUwvRWdXejZhRzVMRFc1MWoranF2SUEybDd0emlQN21scWF1ejRJTk5DdUlua3drMWs2MGp4dFBtOWlwQ01uVXpESGJCcVE2dnE5d1NqK253Q2tUR3lPY0d6RlhGTGs3R3I3YkZsZWZmRHdvdVRjL3VnVU5wTVBVbW1MVXlST2pDbFVBRW1mZDVVVy9MS09HM3I1MVR5cis1MHVRd3JleU5tY3BuMUVMQnB2eERRZnIzT0JqS1BIeFhHUFYranMzOXFVeU1tQTZjZkVySmNQSzhiNytGbUdvVHRrbkdlMjRiNG1tL21kYkxJNzFRcHlrVWNFM3hxeGZlcWRiWWtSSzFOYWtWR0xtcStuMHc0T0VCM2JRc25qWVZ2Y21XL1RpYTFaMDZ3UFhPdmkxTUk3RDdVV2R6SC9qanJNVWRsMVAwSS8xalFBcjd6NnhsUElXRFBua3cva1g1MWVCOEZlamRad0d5KzFBZkdLMUEzOFdSbkVkZXNZRXAxYlNZVnY2MWI0ZnRGa1JiWXo3bk0xTzJwaHJGaU9EOURHUkxUYkxOSTU4SHZadTBVbVR5MFpqbGZCY0E5T0VGcmNSKytLWnZ4bTB3VDExRzJaQUt3QlJ3OTJscnNUOFpaL2hUMXR0Yk1lcHNZbTFORmlUcVZYTUdIaDBuY2FGYlByUzFmSnFxZEdvTklMNzZYSjNqaFJsTkxvd2MrVjQwcXBpN3h4NmdVN0xxa1lvLzVvMG9MaHlnMHJLdXpnNmhVWjNtZEFqdllLK0o5UXhtSlZ0OW4wU2dwRWRSaUwvVm5KZ21VUmtldTFUS3NielE2Z0ZvVXd0RG1MR3BFNFkrWXYwcnR1SkxDV1prKytuR1ptK3o0QkNiell3N1A4eXp3UjdJNFcyWnVKclRpbWtoUTJGdlpCVlhEUnJMaythZUdpclJwYlpBVkwrSXhjOWtBdDJWc1pyTTBEMlVYWERhN2pQOHJ1NmFTY3dPMEVLRDdYdEtEQUNEUmVUVzB2cjlSMi9ucVBseUUvWHZPR3JvTjgyQlJLaCtlR3BjQ1ppcGRtVXY2YktwaWQ1VnBZWm1VQUkzdXRLZXl3b0ZuQlIrOUU1ZlBqOVQyMEZnTnJmZzN6aHBhRzF2QVpYYTVkamh5MHUzRmt5S2VrZWozWFlNTENsQThFbHVwYkxTMFRwdFFnemhrNStmUDN5WHoxR2RDNUtQUmYxUTh6V1F2UDVPeUo0V1NlR3hlWk15NGlENHdJMUtPWVNSVUpNWlh4WVhaMkw0Z0ZvczNoQjhrTGtWYm9GVUppNXljU2xwNDlxTlNCWTJ0cVhRYlluRnpoYzNCZzlDSVNpSWs0N0tEM1ZvY0gyUlJoNXFJUzJrbnJaR2JXaXhrYVUzdEdJbTRuTktDTkF3ekw5OWRwVytrcEYrRmVUY3E4VldVay9LbFFLNjVvbkZKdkFhYWY2Vk1KNEtsY3FqMUIvR0ErMkpteFBYdzUyZ3R2ZEozTGM0aGxwZnJ5OHhWMG41YzhyK05DWllKVlhFUWxYNHRaMGZGSm8rcWR4cFZuOG5VMDNvNFRES1hBVmJ2QXErVmMrS3lqaERzeWlXNFFWSUNWQWl2dXpzcng2cGZ6MlFCTlVtQnVBeTV4SmpBM215NXQvdkJmSFYvbm9mVUNjRkdNWFJ5dHNNbEVwUHcyZGxPOS9Ta1JmcDlSV2tmYUhQc0lPUkcyK3B5S01Ta2tNaXdheFllMU43Y2kwSWszSnJXNGRpVWtjcW9aMCt6QTR4RE9qdFk2K2h1Yk9CeEkrNnJaa1AvdThWNWVkeUpaRWtob2Y5elZlenZRYmtrZDExNTdicDE1MElHcXpMaWEwcHkxYmtNUDFSSFRPOGpRSGcyQmVIUWt1M0JVUnZWbFBwdHJROGsrL2dSdmVRMkhjOXBLaWRWbHlGRk1nSlhZdC9UbitwTDc2dmwzeDlhbDVraWJTVWZNeTBLNmt0dDE1ZG95N1k0cUNyUG1kZGIycFgxcTJzREZyU1dvKzEyNXJoaVc1TGIxbm10RGNHdDQ4RUF5UWt6bS9jVVdyaFVaUWFTTXZhYmNodWRXOFozcGhDd2c0c3E4VWZnSURtOU95eWNUNXVTaUtUOC9hcS9VMFVkZ3Q2eXRqMVBYY3ZEbjdNWDZ1RUg5a0xKcEN5OGRVTUxrR3diZ0xTTndRL3RLVGRXN1hwSzVjWmJ6WkZ0T1gydDFIeVNaUnFuV1dCYW9VZ21WZGUrdEtGdDVxMnRWVXhnNjlWdHMwZFVvTk5ZdDRES3FMdFRKVzZBMHduQ1FkeE9xd0lmaHp1RkZXeFpFbng5UE9nQys0UlQyampicFBUSjhHRVdmajNQMzhCaFByby96ZDZlSG5BYTNvaTBYU2JuV05zR3JMRUY2ZFcyNXlOK3A0aUtxWXRuU3VyaDdQUUJrZkg2bEdJTkxkelM3OUU5emk1UDRTSkVheHNlNW1zWHV4R24wdnc0V3czQ0NLWUxHZXp2Ykw5ek13elZad25qOXV2aW1ZUzBXVjFUWVhtY3JmMTlQWXpPZWZnZVhNM3ltN0pMc0UyR09XbGhINTlib0V0VEg3ZXV6MVEvbVNiLzVsL1I3OWZMWmtabk5TNVdDS2dxd1lrclQvaHB4WW1DeS95VzByZlMxS2x2aVVSMHhxUmlSdjFaa0tvQlVYbHowc2FmYjJqUmVLMlZMY0ZSVWhVZ2dNYk5WUURlMWI2c0Rld1VXa3J4WGwyTGNneTdrbzV0SUlxNERCUVdodVJjM29WakpScFJDVU8yY05BcnlyMHFZcC8rRStodGxZM2hvL0NSVkNLcGJvVlkrcjRrYzM4Z1RmcklmVFpXVjJDcnkzKzNLYmtyWjFwaFlmZjlVMlBydHgvQ28vZkpFTVVXeEJWclkwdnYvQW10TjIvQXRhSlB0TlRhdlVxdUw3ZXovd3ZqNVVWbng2RStFVTcxKzRrcWh4WGF3cEpxWkFOYzZ2Vkg1K1JTWGM2cUtyZGRlUDhxakV5THJhZFgvMWFZK1orMnMvV3RJWEdsdkkrak9VVGVpZjFIamEwemZ3NWQrZWt0Q2lwYkhkNElrLy94YlZZcnFuWld0M2hvMytLbXZnM0pEZmFkYkJXeXNsMmt3QnVKbnQ5a3M0OXNJOFRuMVZ0NDJEK0Z6bWxUYTQvOGVmYVk4aHloSWpGSFFFUHNhME5uK0ZKbjUwOXNHcnlwaElVS2s3dUZpMmo1YkRjK2dieGQvdVB0TCtVOW5IQXJ5TGpjQmc0SHU2M3R1RXdQQWswY1YxWmtTMzc3cWExYlc5bVJHM1NLRm0wT3hUNmR0d2svaFRmUlRuWWNLcjM1UTJzZm5aM28zYXpHamgxQXBlMS9Lbng5VnlwYk5vMVZPSE9ueW85WTA5YjFTbW80S1FkaENwdmRxVW0zaExMVkQ3V2VRQ21yYnZUTmR0RGd3OFBsTHdSaE92OEErVEhyVThkeEdhbzRPRFRZQjVLMDBKbkRYeFEyLzkzTTRUMU4zQXdhL1BZTmMzek0yamMwZkdpeVJTUnB4NnMrQldqZXd2NS9kUGNrdlF5bnJuNlhHbUlGNG5maHdqTnFaZWthSEVoc1lYRmJMeVI3bmV2bmkrV0t1dXFOazJ2eFlPU3VHbmg0elpuZytRWU5zUTNrZmFGeFhRMFZDMnRnQ2NzZjNSOHY2OUtTWHFZMlpNRWlkb1BGVVdNM0I0MkZGckRIb1NvS2wrK3JBZFRaK1RFdk4yRDc4a1dqejFCQ2ZNYVptc0NHRUp6YWpaOVdqYjArZm5ITXRxM2xlZnRzS3IwbW05YTdiVmhKbW85S0MvM1phTGpUOFYxdGFpdE5SMVZQR1dEclRYSTZycEFhajlXODdxUmk3NEJVNkd5d2E3YUR4WnpkczIwYm9COXNhMi9KMGdKVzAvRmtYVDFGSk9kSFV0eE9xWTI2OHU2bkpxQ0ZhbjV6YXh2eGQ5bnJzbWxOTFduM2RidFdyaTFkWmNuQkJodmMrK1VsVWxLcDJvNlphNFhYblBiVE9FN2oyV085Q05zeGV3dGk0MWk3OWRWNzY4djNVSEtQV1d2MFlxOUlQQmxuVSt0WEovdWE4QlI0MHFIK1dOVVdOMWRodUkzY0UvbW14anVqVW9lTXp1OXhkM3BaRHl1cjljcTBDUnRiS0RyRVhrVmFEOWRYNkwxYW5nYmJuZ1FPclpYRVFOVGNPejRmM0hFaWliTm90ak1zMzJHemJkTk9pWDhENDhWUnBvUGF1NnJIeSt1eUNvNHBZYUdwUGZGUVk4ZjlObTFReS9aVFlhclprRkxGc2MremdoK1hmU2kzOFczZmFyVmlqcVVpVGIybzdPRlJzK3ZzUVVnK0ZZNjZsTDdYQU1kbC9CUGk3NnZQUzdISG5qWVJRa1hnWFdBTEY1VWQrTXJqVGZ0Z1pSSDZ1alNGQW11R2lyUndOZnBjQXh1TGJsUk9hS1Bpc2k3bVVXT2I0MXlMTnV0TlQzaVRhZlIzWnIwVmRGSmpJYTM4WjlBaFZ4SEh2czZhL1pwVzBxVk9QNFV6ZjFOWm9iSENmVVJEMWhITmFzVDdoamJ4SjNJK0NZMnBHd2VuTWE5d0RMY1Fnaml1dE1HbXNMaFdaYnlHRmpUcXdUak5kbkhhMElNM2xSYXFLNkJmb2ZQTmNqcmo1V2tJYklPL3Zpb3BNQXZ2cXdJOXE4YXJVc3ZtQnQ1ZTlHMzlGRHBVMm9mQXdrQVJCOTNxaXZHTVhVVkRiaG1mcjZKajFYTmQ5S2dVMlh2bmFrdURydWRkWlgxQmxhbm90L3FhUE1WaURscHZXZFB1TzRYMzZPN0g5WE1PdHh4clV2cUVtVlMybE1XMEoyTjdiMkgzbVlYVVVXVUZVNXZ3N2w5Q3JtcUlaY2U0RjlPb3NNNEhnYzhua2IycWFjalZjcTBGdXJtb25xdmdXNm0xNzZjK05Yd2ZNVnczNmFqWFk0NnUwcm9yTVRWTWhvL1d3VklUSDd2V2RVTXhWZkhjQmJiUVVxNG80WjdkWG9hNWdkYVc1em45QkZwYnBBMEhQYWExTlMzODMrdFh6c3BsU1VtK0N0ekkrcGIvaEJpRHVIUmQzTnI1b2Nrdkdmc2haMUxrYzI3aFcyeU16Nnp5M1VuVGd5eE4rN2VVeXN2blhwR1czT3VlQW9FejlVaGVlYmt0TW1jTlhSbW4vNytuRmZMUUpXVnJUZElxZDNXRC9iS1FWNHZ0R0p2VVAvRzgybmwxZENUdmwyYysxRzVhOHUvVys5SHE5aFYvVyt2SGE5SE9uVXRLYUQ5RjhReGhqUjIzVmN2eCtuUExQcXYxWGZjRUsrY2p6Kyt4aWhlMEt2WDlnL0dPNzJuN1g0RnJ3MTJidklqL3VEaUNHMnpxbTZqOC9TMXhHODJ5QlJQVmE4anRQZnVzdG9OVmZENHgvQ2F3V1h2R3VaZ2M4azE2aGg5cDF5N0UxdGJqN1hXL2JWMnN6d2Y0eVp2OStXbmNaVVhPUTVWT2tiVGIyT0Q0VTJoTWxqOHYxdXVLM3cveERaa2VoOHZNUHZMbnp4UTZLbUlZOWJrUmo5dkNrSTZLN3gyN0luYUp2UlkvUTBwNXJuQnJsQVVGME4yRzNIWTZpZHJBMU5rakp2eEpHdzEzT0tjMkhPNUtjRkh2RDZ5MVl4VHNKOUhZeFhzYXRzYVg2K1c4MGc2Q2lOZXQ0eFppRGZaUDB0WWhiZzNtdDRXTG5lWXNzcmxFeVJvVnRuK0o0MThhNUlqcTc5dkNaeFQvczVrSXZvYmIzRXhoa1MrUnVDTmhpZU54SWxyYlZJcTA4bjE4VjIxejBwdDlVNlNzVzFyR0xKK1AyejhxckxETzFrdTRUczhLMzFnZnQxWUNFMk5mRmNjWFhCSStlNjc1Mzlya2hXSllYSXBuVDVhd1h2Smg2MFN3RnNkQTVzK1RQd0FxaW5kbzFhMDI4LzQ3MXRkZ2U2Mmk1WVg4OWl0NWNGZm8vTXNQbFYza2p4b3JoTVhXRXBHdW0vdXRUVnlYemc1OFJacFcxcnhxdlU2Y0sxOVprOHBXYkp4YjNHK3FLYUd6c0Z3K0xzcjl5NVNPZTc1S1o1dDRlcUdVWE1zWXZIeGRpY21WL0czY1RienRQb2VXeW83RGNqNGhjOUpvbnRFYzNzdVV2M3NveDVTUHU2bzBoY29UMzhYOHNwdlVVZkEwVzU4cWRQOEliR0hIVDRSUUZmc09MNWxRN2drNFJxb3lsM0xDSHdFNzhEVmE3Njlvb2Qvb2J5K3REMjYwSG5QVTJJRmpiT3J5dk5MNkgrVldqR1c1bUxTUEUrN0JaQnFYRWJ6VWQxWkY2dy8yaXJRak5iV3FTanJTa1l6RERrNEUzZ2ZoaThWTU5ldTAxYU05dmxpTWRxMnJjNjRPazFBQkc1TUZmQThzQUhwZzYrK0RCZXpuVXFScHFJajhFNkpMbXExai81TXlFWHgwOXl0UlAyaTlES3hRd2oyaWNWSDdzU3E5c0tlSTBGRW55d2Z1OGVsVTdRdkQrMGp3VzJDRlVGdTdOZmJUUHdHMlJrbjl3M1dwaGxIVnU2UW0wZGlZNFB5TVM2NGQzRjhkeHNxeVZvTjlNVDM3VFkvWUl4RC9CVDArbEVWWXNnM283T0NrMGVlajBvTnJRSFJHeE9NdVNBOVRTL2trMSt5UDIyWTVFYzhuaEpvSUR4SFBtZ0I3L0tZSXQ5aUZlUWpzcnFmWnBNNGQzNXVhTW4zRkR4Zm55QlR5Y2RybXhXVG9QVzZUMXhpN1NlRzJGMmdkb1ZJVk44Qm1XdlZWK0xtemVsU2RUQlhiWWRmaStKVGFPZFAySTBTUG1DSTUxZ1QwNXJDdXEzV1JxVXNhMlpBV3NzUjhSL3NCTnR4RjNhVzNyMUkzNzZPUWZxQ1duWFF0THEzYUR4SzNJcXl3aVYvSVdmTXZWK0xHNGoyeWFLMngvbEJkUjZxa3EzMmcvYktsdlloTld4Qlc3RGtYQzVGcHlkaW1ic3VQNTFGdk12bFBMZmY1cy9LWnNyaFFjVTY1V01Mc3U2M2x2Qloyd2pZNVhoOXBlLzByN1BtYWJiU3czOXE5M0lyWDhmdjFPZGg1ZlUvcmtkYlJzbGlkazVINVBlSTU5MDN4TUpXNFZMTGYvMGw1ZzIzUCtFUGdwZHEvZVl6YWladGF0Vzg3L2YweDI5cW9wWTk2Y2tPTnVvTHRtTkNqRm5sT2hHN0hyWEVMZGJETVc5dVgxUGplaW5GdmlkK1Z0TEFVVWw2YWJaMWJWUjg4c2ZHMGFXMloyRm9LTFM2djFDcjRVWC9yNjRoSmF0dHdvMm1hOXhIN2pWZGNKZSsvc2UxYWRiM2pOUCtzVVBmNE9peTBuQ2RyZXlyYm5LL0UzZCs0eCtwV21kbTZ5dTl1S1pxdGFYbjdmdEphd21uZHBqK2ozV1haRnQrVWIwL3NKb3EwcU14cFNQS2EzdEdlRDhSNVp5dnV1V1ZjVkIwdTVkcGlWdEEvUkd0Y1JYcmFjaFpsL2NqWXowWGVNSW5qSW9Sc2ZkQUhic1JabFhhT0FqK29iZW5wM0V4UFNtZkFiZDEzOElaS1AwOG1WcUFjQjFLQUZ4TFBzZUc5a2kzaGlnODArUzdLS1l6cUVGZkh2aVBZaVdvT04rZ3I3Y2U4bWpjUTFNY2RaTnBlM2xZci8raXBOOVhLUi95QjkyUjY3QzhsZ2RKNnBPNTFwcjVxdVFYbmJtRUNkbXlwNHRuVFdZam9KYk41Z2tsZFZ4RDJPVm1hYnpuU0MrR0N4bGJGdmpPei9YdGMyeThjMFBQVkFMMVBxZUlDdDdOUm50SjNjZDNSU1dXZC92cnhrck9LOVZUUEJHeTZwaGVMMUJjRjlNTFVFRjBOa3hhR1IvMXRiQ2tTYjg2M2hmTzI0N2FPNlJsdDJNRXVkMDdiZlB1L1cxczkxdFVEMXgzR3hMMUVNcjAyb2pFOXpWNzR1bGhYWXpPcVJaK3JVVitvOXh6aFRPMDRtVGpoK2xyaHkyTHQrcmkxVnRKS0V0Y016TjNCMEpJbDVnVHcvWFBQNyszaGtPQloybll6OTI2Q0p6bThTOXBVUGlrUzQyczlpTnZqVjlhQy9hamVBQlBoaE9CQ0VaSTY1ZEg1Ujg4MzNhUENOc2w1dGJqWkJTeVc5VEJQUjdKeFVrdHhOTFRXdEdKekZ2T1ZtNHk3V2kvTjA4L0VNQlpyKytkekNORnZOSVJOdVQ5b2ZUb0wwWHFZRks4aWUxdW03aGZhdHhySjcra2FHUi9KUFZITlpTS0hvSDlQcHA2MmF0TU8yUDFiNTQvZlAzV09LandZZnVmYnZ6b3FOUFlCYjBCVk0rRElkVjZ0TFhyOHh5ZnlnNjA2NnRiWTR4ZDEzUW9zMTFIaGQ4UFkrNTF2Zi8vOVUwZDlmYlVjS3dpalR3NkJhN3NISjFpUkprTkQwbVJvN2U0TXAvTXQyQitNVHgxTjlZME5QK3Q4NjNRK2RZQnIyNnFqazdFQW5oMU5aVGlxQmcwOS9tUUxYVTJGWklxOUFRenJTT1pQU0xodXZLb0hHSHlPZjhSYjNMdUh3RUNqYmZmdXdmdUg1UVRHL29pRzZmVHR6cWZvNlVtMWdzNjNUcGZ5TytuWVZTT2lYejFERGJMajlNek9INTlTL3RINTl2Zk9MMFlBZnNtZTNDLy85MHRnZTdEeit4L3hCb2VPNHdZcU9zbm9vTWxqVy9WNEE3cXFuanVBVnhYNnhxZU9jUTcyNm5BZlh3Mys4OGs1a25QRGZ3a3VQTmpHSEIxM2REV1dyVzd4L3IwRGhOOWRhSUd3ODYzRHZTN2M0UHZlOEEwbklKdHlmU3R3OStpM2Z4N1U4SXZsL3VMdFhkc0lUT1BnZjNZOVk2OEc3ajc3akt6Mzh4NnZGaDlOb0c0NzN6cEg2c3ZEd3hjS25VbDBMOG5Pb3BmeGhMNTcyQU1qMm9sdmdNUGVDc0tSNndUR09VQVAvL2pVMFIxL0ZBTUQybTRlSEtvT0EzMnZXazRDbHhVbnhEbFdVUG5heWdCN0k4Z2VYYzJKWmg1SFQxNFBFS0s5dmh5Ti9kN1NEUUxWV1hnMVhUOFlRa3YxalErOGxoeUVKZWVQRGg2UC92MEFJZGxVUEtlejNScytRZmNTOUVIVjl4Zmt2anFmU3BDSDFrOXdEZjJyOHkxSEZyN29ycTFhemhmZ0lvenkxTUFrcjZKL2RiNTFmb2tlcmtNUGpjN1pIalJzd3lIVHJ6d0RXSzhXNlB6eE84TFdBT0sxL3BFczlydXg1dzBQV2tCOTc3SWY4ZUlRTW1kWGlYNzV2amRlclhOaE01MVBIVXdFb3dtdUx6emRjZWVYRHRrQ09mVjBXY21qL0c2S3EvVXExNE13QVZwSHcwR25zWGMxRERWbUVIaXNFV0FBeXB5eXUwZDNnMzdFbjltV3d4dXFIcTRNNERxNjMvbEdFWnpNd3lsNjRuc3FLRDUyZFdObFFBTUU3ajQ2QzJQdlczNWdPQUN2UVFYQThQMjVxeE9haDJZUzkxWmd2S0RmZnkvaHEyOWQwTWcwYXlFSTlWeTlSQUh4czhBYUpzeWsweWs5WEx1ZUM5MXQrR3lnMzNjSHpkZzdSbUQ0Q0RQUW5XS1NnNzk2dFB6OXdVUERNd2Q5aTgrS3pESExYcStycjBxMHAvUHFzNGd0ZEw0OTlQdTkrMCtkL2NFWlZqMWF1QTd2dWtHOFEveHM0eVBPZ2Q5QzQrOHRGdytlaDlPOW9lcldPeTUwVDRCbmhLaFI1MXUzUkVmM3h0SHlMZGVaV0Q2aUdqUExSbnl0UzMzcStNQTA5QU0wOXVraXlrVDNCellhOVJPc1FkS0RIeGo3NzNnekEycHdIOUZROUNBbVRkN2pRWVdyUUFXN0tzeXd2TEZxVzlBaWtNWjlQejUwUHFIL2Q5LzVQZmt4VEtnb3dtdGpudzc0Ung2bEVRdGlWS2c2d05oejM4bFpaSit0OElueXFyT05pYlVYcjd6M3FSTVFZakFpZStLK2Q5TE5SM0pPOVJuc0RSWEpJZVFBSThhWStmWUtuYXVRQkl5OW84TDFIb2xlSU5sNnRLeXJPNnJjUmFBR3h1c0Jyb3lxTGVSRm5IL2hQLzFndkZkdDQrVHVkK1V2T3FZQjdTKysrWXZwdWp1c1lQdkJaLytBaVVhbnRDVTBuZ3VSbEVFK3g0dU1jSDNsSVh3WnVZNGY3RlVyNGNOSFl4OVlRSVhmWFgxNENGd2ZJTEpaaHA0Ly9pQUNwdXZNalVETkluK2x4QlhKQ2ltWFJZOUJMREFRR1A1S2ZhVSs1UjlHYUdVYndkNENmaWZ6YTVtK3RKWmx5T3BxWkk5SGErKzNrL3gwYTJ0Z3BvMG95cDhuQmY0YVNZRnRtSmRwcURBd0x5bkpTdzhTVVM1OHRwUDFHc01wNGdPV0NoOE5xS2FjamNic3ljTGtuRHpwVWxjazBCWWsrSlpsVlUxZkZITURkUjhjdkdUR2tyankwU3ZBUzBBYjN1eGhSRzh3c014VngzbzEvQnhVcmNCZTlZeEU5MFBBOHVydWdiR0l4UVB5ckZxMFJJejRNeVlnbitNRklvS1FWd3VMUksyTm5vamU4VTExcjF2T3RnSzNFWjVCSXFOZzFnQVFUWGkxQUtKUzF0YkJRdVEvRDNpbkdYekhmK3hkNTgzVmZHemxNMnpYOFEzOGttNTQwQTJSbU9kamdWTDNYSXY4MjNUMzFnVmhOZlJjWFUwb0R2b3BFbFlOOU85b1VHaW81RytJbVBDZTBONVBIZnVBanNEWm5nd04wVVd5cEVOTTlqTENHUDdEQ0JCdDlSQytXdVFKbHJZeW9saHd4SGdQb0dyWlZULzRSQmpTRTJGSXc4SlE5SmlvdTVqdFJOdVAva0p2SWdxMlI2ZTc5ek1hMno4UGJxRDZSSHpZazI4aUZvYi9HZkdRYURRa2hhaGJBMHZwK1BlakNpMjk4UURJc3RVZ1VJRkpidUgzUm1MYVVTRjBUOS8zMXRHQ3h0WjRRcGVDQjB1d0NxaWVxbG5RQ2l4aTZ0RDNyb2RnWlRpYllYMGNVWUlYQjRaSXdobGIwUEJEUHpCc0FvQi9aT2FPUUIwYy9NQzFjM3dFUCtHakExb0ZLakU0Z0NyZE5RYmJlZ2FRSUdRQlNSTjFzazY3UTA5NVkydjVBU2JnblVqdFhCQWdTbVdwZHBwbk1rNzh6eSs3cjBqS0x2S0pNdWIvVWtFTVBuVjhVNDJVb2F0YWFsbEJSeVB5ekhEMGZlK2V3eHhEL2pjQVJJTlY1Z2JOUGpuZmlORVd6MVhicXc2NGtMUGNheXI0N09HOWx3N3lTSDNwZmlXTXRzQnRqZ1dKNEE5eWptdDF2elVDQWRFSjE4bXJmT2puQ3ZOYnRFK0M4SjF2emdIQ0tyYitxbHJ3c0RmVzV0N3dUUmZxblcrOUhFdEQvNXdZU0VxSVRpcGhZRVMvcWVIcy9Rckc5cWtUQ1pLWnlicWZPb0ZsRys0aFNEOUZPakNHd0NHQ0NXZ2hLUWpOSEQxTUdSTCtmVmI0L2RGd3d1STNCTzhMdzlWcDBDa3RML3lkanR4SnlYd01LK1dUZjRYcUVTbmhHWDBYbTlmS0ducTFWbjJyS3B5dUpMWDI1Z3hlVi9TVFA0cnlzKzA2Rmxsa1pzVHM1RmNWSGd3aTMvN1YwUXgxYit5eGlJQlFreHhnNXVFcUF0SjBqRWtRZUhUR0l1UzQrM2ptbUNLbXR0eE9mTStSS2R4eVlyVEc2QmVKVVZpcXl2K2N3RElXekpBa3RTYkFtRmlBVWxQbUgxaEl3SXVJdEUvMHowaFpwNkkva2RnMU01eHRZQlorRUZSNEtQMlNFYnIrUTA3SXlZdWR5Wjhwd0JQTlhDZjBMRjR3bmttMVBXaWtoK05IbjZUWWlkWFgwbmZSaytpN1AzSlFUS1RqeEFDaXFRQ3pvWnhXanhrQmY0QXhsaHg4STFLd2VSY2FDZjhvYXg1L1RjcTVON0FNRzhGcEJBblJ3NHhTa1B4QXhNZ2J6VkpsOWwyUWpEN0lGb2VuQXE2TmxLOVhqQmIvaW8wZy9NRkIyMzhrdmg1c1o2dUdHTitBci9PVWtwVm9YZ3NiV0d4dit1bjJycHR0WElpWkVPc0dGZXVheE16eFRvTlhHK1V1ano3VjRpRFI0Q09aNDVvQy9aTVFpZm94UlBvd3cxYWlrZWw4aW1CLy83M01MVzMxakVVVTlPaGZ4QkdRK2J0Q05veWZ4SUxpRlpHa1RseG9FQU0rSXdEN2JKd1JhRVdlNUp4MWdKam9LczF6ZnVJWWZyL01mMFdtVDB3QUpmSHBpaE15c1E5RTkzRE1XUEFLK3R6RTlZTWFiMkt0VTdLZ0ExNXhOTjZvR1hMZlJ6bFBXYUlwa3IxaEZ4bjNtUHR6NzRLeFA0K1JIdVAzOTczcnFkdm90Sk94OFRtbmJ4YU9yZUpEZERwck56bUVlSnhWNkYrZjhCMld6bXZxVjhiTG1nZmM2d3JzTGNwcUtvT2gwOFZVTjlZcThXTTh4bE1NWkRVdlpWVFJHdmo3OStta0VTZnBVaEZYaWV6ay96OTdiOEtjdUpYOURYOFZsOTlVVGZMKzIyNGtUS2Z4MU5TVVJWdENHSEFiakxaMHlxWE5RbkMxQkVtQXlPUzdQM1VYcllqVjJPM005RXlsRWlQcHJ1ZWU4enZyUmV5V1FNWjBlc1M0L3ZuejV4S0NlRU50OHdXc252cnJFTy9xVGdaYjB1NUt2azRQNnBUQWRxTmxwVGMxd1JzWG1aM3lzdGhBb0Q2YkY2RjNZYzV0SFo0WWVERFBLN1RDQS9VNDN5YVdCVHhOYk1mcm1hR0tReW4vUk5QS0pxbXBnYTNmUk9FWWY3Nm11MEM1djA3bVJYWGtkWFNwTmZXbXBKQlVhaDY3VktDeVlsSWd5WFcxQ01jamJWVmYwcmJLK3BQdkdiMVQ3NVlhaGNnSVRuanZuMXMzY0tPZVdSV284V3dEcUNaRnJvdnMvTmo1QUdYNndEVHNtYW1IeElSU1VFNFR1ZVI2TTdobVFhZzZmdnJ6ZTZBUkR5NFluUVNTekZRbkYxUnlmbjMrTWJPT3ZnVTFIVWxLZjIxU2QvM0FYemMyQmY1dG1aRzltYjc3UXQ2OVFkOHRhYkpJQlVuWU5tWlBXOVhiREJjRXJ4bG9zbEgzekhGd3hQYUpIU1BsOXlYRmROMHZVUmxuY1A3R0lSdklwWFVQbFJnZW51dG5iRlFsd1JTcDVvcTNnMFJybENGSHpoVkJRaTZ3US9VOE9RQmZjOSs5aXRLYnVCOE8xbnB0dzlUVldiWCtRQjdtSGhSK1R6Uk9jK2JZTGhvcU4xTlJ1RW4rbk9DRnk3M1VNNE1Baml0aFdtdmJXL1V1Wm1xR09mK1llM29CUE91ODh2MWs3NUdrWDFPVC96dzNuNTlOQkUzNjNwQkVMMEdlU29JUXpxL1BiNWMyMUl6Kyt2M0RlZVFiYW1nT3c1a2FtaGJDVTFCUHRsMXJoQjRnN0tJdVI2NDZWMjBBWjRLUGZHSUJLcno3RjlMQU02bjQ2dXA0VVUvMm8yQnNxYUc1VU9NS0gvbytWcFVqSTA5U3BiTlNFOTFYUmNYQktPcnM3eEpEbTEvdWcwSm9kNFNlNGdnM0VobjYrNGNEZzJFemhhZENlL2EzUkt4Y2tJaVIrRHdYdGtadGtwaFFScTJKd3RwZkwxRmsvdG9hT1VvWTJEN2hvM3ZFd05sQmFMdFdDNmkyUXp3VHlENlFNQ0tJWVF0eHB4QU1hT1R4ZWNXd1N1NndkeEdndWg1QW1vQU9ncW9PSmhENDVVdkpZMmNnS2tRb3czeEFZZVpFM2dzRUhZUjQzcjF4UFZ2cUtpdElBWDZnZC9hREgxVXhwUWxrS0x5Y0o2amt5VGFRU09qblBNOGJzMDhyV3R1cGFhNEg1cS9wY1h1b1ZNVDhBRlhFQ24wb05DRXJEV2Z4MTVKNmhSd0hHVEpJaEw1SjF1OElDLzNDMUZyNXdDV2ljMWZwU2Vnd0FCUFpuTW1hNVFMdHlNOVlQWmpOcXd6aitXUUE4bW94ZVNwek1mYlhtSFpGWmxWUDlUZmtIdlZVUC9rNmsydjRVYktrWnFoL3hML2taT2hsakpKbHQrTU9ra3JGQXRVS3NqSENZV1VSZDd1TTc0WWJsQ09kV1hzV1FERnZPbjRZZjdIUitrR09UNVN3OHl6U21DQ21ydTFPZzh4OG42WUdvZGptV2JCbVBsMlB4eTNROWZaSVhUUmJ5R1VXcG5hSmgzRUI3R2RUajNXQWN5UVN4d0JjNFAzZEFxK1hxM1J1emxVUW9UM0k1N2hSVG1wUTJQUnpXREJiVmVHMXJkRm9Kd3BTenYxbkVjNXR5WDJxaEc1cnU1ekRja2syMUVaWVJ6S0w4dmxNQlFNMlcyVUFLYnpCNStUeCtYVzlWbnBjMHQrb1J1bjVzTXJvVVhnanRRdFJ0VFJNbXJDZzEwZHdpZTZ4QnVEeVN2OFdNUGNaZzdrTVg2eHp2aExTK3g1b3Jrb1BYRk5COTRyQ1drdkZ5SUdJOHlSeExKVUlHNUtPa0ZRdm1OWFFMOE5DR0huWlhGZEpxY1ZYMWttMStMeEVxNDN5ODBwYUxiNlNFdXZWMWdnVXh3dE5TSVY0ZHZodlJKSEpEN3V5cHlCOVk3MmZhdUFrQWZMTEVOUGQrWUd4TEs5ajM4c3lzTE1FcWwwQkp4dnNldnpYSkxwNDhMVlZIZlNaczVWUnRXYU5lbkUyVmFISnoyamhBcmlpdVlQWTkxeXpHRTIrSlcxeWxqeXEvYlVCT1dOVFdGNlMvcG45L0VpeW1vUWtGLzY0T0pOMTQzT2pVbm5hbFdkVmdaVk4xUUNiWk5mUisxYmFoZEpUM3pONkNISkNXSmFLNHZ1WlljNU1ZNUFva0hQOWl3bE15UENIWVlEL00wdG1MVHdjNmlySU9aSklYa0RDb0hmamM5MGZldnJVRE5HTzNHNjJSVllaTit2SW9Ic2d3ZzhEUXlOaDFNVDh0eXZIREF2UEJPZGoyRzY3MWhORS94Z2laM0IremJsS25pTlY0ZW1aS0FVRnVEMHpkUTlsd2VRYS9GQjRvNkxINGd2bzk2cVBVSTRGZ1hGNmtnRDAyNS9uRTA5N0l0Q2dBS3NnQmR0NjRWV3N3NkpSQTA5WEFSU09VSm10bmYvKzErOS9mVWpDVXA5Q2IycTZUemdDNy96alhKMTluRVh1UitJbitWaHlVV01TVmJFUyt4RjlpbjE1eWFpeTl5OVUzOFk3RUpCQWR2ejdVMkFVeGpsRGtaaTV1QjFVSXdLcmtvVVhWWjFJZ3FscCtqZzZ3bHhtSlNIK21YWHhUNmpHbzJWQnJPNHBPVWUvblQ4OU9XYW9QdVZHazJtekh5cWVrZ2svRVZTeC9rSXk3Q2NvLy9GcktHMis0QjhMTU81OHlpTDVkZlc0RmRmVlMzMFdvdndtSk56TXAyQnErMDl6YzJZL3gwUzlmWXU5VGJLZWRtNHJjbGZ2M0ZIMHlGSHp1MXF4VTU1QnR2THA1OHYvK3dXVmlvS1NSdFVSVHl5aVFVSVVsOEZjdjc2NnFxYzJIZHdBYWw4MURLaUFQRDJSbG5DL3FPa1BwWVkvcXI3OWNVNmh3S1BnNDAvVVIrUUl6bm1MOXlFME9IeE1JQldESVUwOVFaVUZqdWgvaElRdWROV1kyNEUzKzBGTEpGVXJ0eUQvaFVTRnJJenBqRER5clNZUDBzRkZQdC96OVlRSUtZaXhlOEVUZ1pEQnZxZE1FRC9aM2hOeDV5TUptM2FHOHRsZXJiT25BSGlMVW8rRTVuS0g0R2UwNC8vKzVmeFVYU05DcWlJNy9JaWNoVzBqd3NmakZLTkJScDk5anNET0VmMzdsNS8vZlgzOTdadnhmNy84KzU4L28zK3ZIZUdmcU91ZjZPcVJaNHpndzFIemdPRC85NTBNNWpCbXQ4ZnF6VlRucVpKYlBaR0hQMUV2NkxqRWFDczI0Q0NndHI0KzJiUGoyeTlBdmZVdUVuWC8rQTU4ejlqS3I0bDRleUdidkVETTRPL0VLMyt3cngvczZ3ZjcrbTloWDFWT3FVYWxVNnFPbkZJN21kMkdRS3c5T0Z3NjV3TU5Dc1Z1VG5LK2tkbnk5eU9aZTNEb1pQTmNBMEo1M0gwdTR2bmM4VkR3M3ZWdlNBOTRvcGRMVW1maE8waUJaSEUrL0xtZEkxWHhGWHk2OGM4VlNwd0dWSDJxZWN2ZEtsdEZ6NFcyMXp1MzNTQlUzZktSZWdsak9Ta1hPU0hMT0pCcVNSV2JuUlRyZThhclFRL0lyTjVFUmR1am85ZkFOenU2ZlVOc3MzVWtwOEkxQ01mODgrZWZmN3U1WU5XTDU5cEY4L2MvcVE5WGYxMWYvL3VYUDZrUHYvNVZmckNPQkg3N2lmNzkraWZxRkpQeWtLV2oraXZiUHdUL2JKbnF6Ny9CeVVBODkrM2I1WDkrK3VXWFA2dG05UlA5N3VhMEZ3ZmNRVFd2ZytkZ3AzOExMSWVnVmpWVFJreHpNOTg2LzJxNmh1MWEvMEV1Zk5Nd2pmK3dxZzFNNHo4dHovR0JHWnJHL2tQd3gycGdibVJjMzB2amhlSmxieVgzTzh1WUg2ei9CK3Yvd2ZwL3NQNGZyUDgwMWdLc282NkhYWkFNQjVBV0p5aEcyeU9WTnhmTnZXY3BhTlFRNUpyb3hxRUZ1U1hLSHF4a2VndzA4ZGErdDI5c3RUMm82Vis4ZVpmMlZ4cDlGZXAwMzFORWF0eDFtckVTTjVOM0o3eTlJRGNwZFdxbXhBQis0bG04MDdSVlI1Z1lMVDRndHlhaEczVjBEdDFFQXZTWS84UzNnL3dOVERhNkxjVWREQlVSMzRDVDNONVk4UzcreHgwMGRHNkV4cXJSblQ4VXNWL2o4emZ6dFd0QjRjWW1odzBVcVZQVFJEYVNSUVBvOWdIdHBuUE12OGZFV3AxQnQ3NG9VcysrdDVsZnEyOW12N0VWc1RHV25TVlFXaHY2ekwxcnRNRkNHZktmK0ZiSDF1aG1vSWhzeEcrNHhmMTV1TmpRVmlkL1k5MEV0YmQvdjNQWjhZRmNmN0M3Tnh0dmo3ZklEVHNMZkRPVXNJTDdudExTbG43d3JXODd4NVB2SjZNcnQxOUR0N0hIL001dk45MTRUbWhqdzYzckpackpqNXRyVGtlME1ER2tqbSswd1JlTmJ0UVVhVnpiUGUrdDU2TDZuLzFwSzkrUG85ZU1XS3NMaXozM1lvM2VWYkZSVS9EWjJMMitHMmt2MzNhSDBxYnNhbER2ekEzcFpzOTVyTkdqcjdrRG9OQkN2T2tjNUc1bGEyNm5XYktYcmhBOVNQMTdqVzRNTmJwWk8zYTlaS2M1MXpoaHJKMTR2UVNwdjVrLzdhUXhFQm1jNENwUzdnYkNRODhCV2N2cTd5dCtMN1JUM29OTzFhM1lHMmhoMzdOeUFPOXhoTWl3RCtKL1k5M3RqTTBoZnppUEtOd2E5MzU0cmt3M0k0TmpmYzBSNHVONDJBRnk5d1huOGdBNXVZRm1Pbk9OWGdKWnZOcUg5b005ZUNxNXJaMk5sWHJ2V1A2Vjd1MXB4MVIxZy95eDY4Ykd1c00yVHJhUHhSdWhiMVdwc3pxYXgwcWRXSmFtcDEwN0libmwrWDJ0bXlwU1k0VWV2WmpPOXVqckJUZ2p6MXNIdmtJTEsrT2c4MXE5ejNwOUVLdGl3OTI5bG9mdWVXRytsTVl0a3hzVkQ1L3ZDL0RvZ2JTUTd5OVdKR2F1MDZDbTFUdU5nODVSTloyczBPMk5qbTRmTXZlOThFdStQNDUxdjl0WUg3d1R2YmZmdVNXM2liNitUck1maGdRNjNhUjBwdytPNTJzcDlucDdQY3NSQW8xbXA0TFVDUTdTclhhdFk4VllpamQ1bCswRndwWFI3b3dmUlRaU1JRWG85Y0VtR2JZRE82N2hZU0tEK2hQZFlSZEtJc2MzNG90ZGMxeHIzOUhxbllreUt0d3d2TlBXVWNsLzE5WUVoTEpvZ0ZGYkNEUzJEK1I2QnhqdFBjWmRKU2ZYMmc0cDJSbUZlbjB3TnJoUkNIRzA3b0RKUWZhZjkycW5XVHNqUlIycWRLNXR6UkZxQnQyTVZZcmNSano4MzF1RGtyMWxoOHgrSGIyUjNHSzlHeWNjWWhNNGxBL0J2YU1wWUhCallFaTlVSE9hVTJWSUFiUE56SFYzOEtaMnpKZnJrVzltQ3h0cjNISnVVRXlzU29xdmNZS3JqQVIwRzcwc0RYeU52am9XWSsrazg5MzJrKzF5YzR0Tk43dmwvNkIxM3FVVGI4RTRic2VXeGQ1QjlMK1Yxa3Eya2kzK2dFMjBzTkp2RHppWDMyc1BEK1YxQmJzUnRUQ2t2cWZRYkUyUmpQRi9CZS9mVE5Qb2xucFY3SU1Ic1JGcFNQYUR1ZWErSzVyTDg5OUlGVC9QWVR1eWM3U2V2cjlPOHpiMjJWaDIyTWtlMkhhYmZlR0F0ZTFNZEVlQUdPODd5OVVPcFhFQ3A0cExjRElmbzlzSHVxdThyVXdXRlVjVkc3N1JuaDUzWmc0L3MyTU43VE0xMWh6V1ZmYXk3ZTF2TTl2U3J5MUxmU0FJbmQ2SjljSmdNOTVaVW5wOUFIVFFnYlIzTDRzVWVLd3JRSGM3dm5JZy9lNnliMjJaOTBTanFWQVdHOU0zV3VmRVg5T1hKWWJSbk1iYzROaWFLamFqWTMwYUIrTU9oK2pFTldxczN6WnBSZXJFcWpnQWovdlpXUTdndFh1TWdXTEdCbWU5NFY0M2FySUlJa1hxUENwaW45SWRVRE5IL2JubURvRFpmbmlyTXo1VlJHVnNpTXZhd0ZtT2xYci9xK0VJc2U2QTZZSHJmN1F2VGVHRWhjWTFHNW9vUk1ZdEcybE9zNGF4ZTJOMXBKNXh4QmdhcXlRTzVTMzdISEhOUUJYN2piZmljNHBJTFl3MnVGVWwvaDNocnI1dk9rSlBGU25mYVAzOTRrVVNMRDJpaGRod3dFUVpMWDNOQ1ZkdnBydTlvZDlia2NaQWs1aEFQaGdMdk9DY1lCOGpvenZHVy9mNUpSZlAwSlBGRHREYXZiZml5eS94L1o1cXIrRWFjQnJIdWtmMnVkM2U0NENhSWxKN3h6WWNxbGNkWTNmQmF6NmU2L1hCZ3l3TnZFZXhTV251NEsxd0wra2ZSS28wK0pMREIyL2J2MERzL2QrSDNwSllncjVXRnlMandQTzJQWVpnS3c5RlBpREJhUWFHU0lFM203TXJCQnFIL0RmSDRxNFg0RjRqME9qT1dHdTluL2dsUlZMR1dsdkF0aUhRUlBHQXVxdnNNOFkzOHJrU1g1N3dyc2RXVTBVS2FIWGg2SGl2L1dNMFRtNzc5clI2di9ZZ0xuMVo2ci9aT1ZTNTVzcTRiUUNqYmN4MUp6aTF2V3B6di92R0FiMFZGajhxenVjMWFmcm9PSjVqN2JEN3hKWWRINmR6NUJuYkp6Ymw0RGljOTNIZWZjMHhZa1hxcjk2VlQvRXdXOWpMWTJ2Mk9Rdk8yL3JERG9qLzNGODNlc3U0V1lFWkc5ejR2Y1NqSXJuMlh1SlBkVWpiNzRmSHczMGFKZTIvRDE2NmZBdTZPY3JudHhuUEwzM0RFU0xJUzBmSWJ5bHdzZ2dDUStvQWdSdERIdXRwOVBKQTM4S3VISk9EeHRQUkhGQlRSVFlZY0VJQTErZ1EzTE16WjJrTHp0STRRQ3RpQStqMS9vUHVORzFGWUlEdWdMbkM5b0ZNTnlQbFFEM3p0R1BwVXpMZGgzK1AxSFlINlBSNHJuRVAzM0U4QTE4VGhia2h2ZUVZM3RUZjA1Z3JuUENvaUVzZzF3ZHozWDRqWDVjTGNVamYxK3NEb0xrRFl1ZDRUOWlmbmNpMHNOSnJGRnlmRi9PL3ZXUGZEN01EbmlZK2Z5dnZQUVNUSGVxditoL09yK0xBeXVCQXBOVDZnU3lDOEwzSWVvMWpiVVZjdnB1OTA3RE5HZG1mMzhzYXZWa3U5MzUyTG5qZWdPSUt3WWdXYWloV1lKVEZEcnliTmFzTDl1aXRjUFlyNU1DZkpFN3ZpSG9HR2oxZ05IZmdQeHdaNzVUdTR3NFpxWWdOU29NMHpRWTJieS9nZXM4Vjk4SHVJbnNnR3l1dGpySER4cDNHVHFEOU9nTDNrSFd1cVNQV1VSems5MmtJWEhPaDBjdTVVZ2RkUlpxK1ZUd0tYUGRiVmVySGhzUWd1OGVESzB3VlduaFBzZDRIeEVXL1VSNi9RNDFOVm9oa1NSbXJxSjdKOGtqK3cyaUg1VGVtdk9Hd3ZNaERhZ1pnWG1lOHVSN3JNblBsRnRlR2ViTTROTmdueW5NU1luZ0dqNHJMK1crelNaNWVwc1RHYldOOHFNN3pFcDZtTzRLalNtTmhORjI4WVo5Z1RtTDVBbG5xcjk0MGxoSEZzSGZBa0JQR0NpZkViK1UvdzNIeXdpT3VGZlZtK3hzcklqdFY4N2FMRWVMRGxPNEkzOFdXb2p0dzNjRzdzSGxWak9WQmtUcStSZzhlRmJFLzE1eEQ0MXBlWUF0ME8wQVdCNzdtQ0N1ZHdqUTZxZ3ZZM2tBTlBOMFJWaXJYREE3TVI5bFpMK2dnMnZrT2RpL2RFUUpGWkZkNzVmQ2VQaWNuVmtScWJuRENFSzdGRzhVWUpYMUtrRWUrVll5eDdnZ0xqUU1UZWRSSE1VMXZTZmNINU9pZkNNdDBnTUVKRWRMYjdMZVNPN2srUWQ4M25UZVVBWkxpNnpTWWE5T3hyOWNIYzkwRis4WVNuNHFYckU0V3YvOHFkbDNsdmRabGErdE9rOUpiYjFML2JLKzREa05zTUhxdE1kZEFaNjdWMzQrZm5heVhvTU05ZUl1YWY2Zkcva2xzL0R1cVR5bUxnNm1LN2ZaampVVTU5dThsVnVDZHhwLzBBMFBxMXhTcDB4bTlsOWlCZHhvVG8waWRTQmFYbmRIeE1USGJzYzdCNjJRTVI3ZTl2MUc5c2FQMjllVytyQmZVd1VwNW5BQjV5U25HZmFpdDdqdlZ4SHB2L2pPdU9WWnVPMk9OWXlPWkZ1S2hjUE5lNGtaUnZhc0hodzFrc1RGUnBNNmpWaGRpbVJhR3N0aHdEenducjhjcmNHNjdMOVBDZzFidjFONVBqV0VVSXdQbE5hTTRpcTlCdlAwT2ZaSTZMZFJHaWI0NWZMSHMzdGUrZjV4dThPS1lnWmY3V1Y1WUx6RlF4Zjc0QlBVSEQ5QnhEb3NqT1dtOFNlWXZlcGYxU0RiYkIvcSt3Z2tUV2VxOElLL3QrSHhPblFaVFJleVBkVEFnK2FzRElEaHNZT3lsTDV4b0RQWEJXSGNIbE01aSsrY1B2K3BXbThWeGR2eTNzbDl3UXF5S3VHNmRSamVteCt0b0o3ZGhwTGxmYnp5MlUvT0xRb3pQajl5UXY1OGVyQ0lmNUJMbzliK1Qzdm1DZU02WDVyYThRUGRVcU03RFEveHkzTGFuSGZwMTF2NlVXUFRGTkg2U2ZhbXNmemZpbXJGeDJua2RoMTJQc0Juc213ZjRVbm8reXFid0hjL2ZEOXZQKzdEOTZGeHora2p1L1VMMXBOZ2RkWlhmUHRlTmxtc0RvSEZDVFJrMW8xRjlzQnB3UXFCSXg4Y3RuLzV1b3ZVeGp1aitXRHRlNy95ZXRYUlhCdGVNVVMzei9XS3hUK1FQaDNURDFoVFJlRTh4aExXM3lyRTg4UjdXNURyenFOSDltU0lOU0p6WHE5WHMzcWkvRzV3UWF5S0lDRFpzNnc0NytaNTVoQWJYREJTcGMxUjgvdEYxY3R6QlhPZWFnVVlialZHZFFURlVEM1F6Z3JRaGkrRHQ2dlc0ZzVYQzhXK1ZrMEJqMzNKL3JOMnlsTUUxVVgxeDVUM1YwSFArQzJ0bDAvMVlsaGlRMUdVY09DRFl6T3NPdklNaXFkODdSVFhqVjI5WUU1blUxQVdSUWpWakE5VWtialEwY2ZHMk5YM2ZybzdkUW5lYW9TSU5QRVVTVmwwWGhPK3AzcFR1Q29FaU5KMnR0YUgzallYY1cyZnUrQVluaE1mNGFJNi9MMmtQZlcwLysrSktybmZHT2ljOHk3dnU3WDJmNjNhNFRlbDQrbHEzaVRsTlc2TDN6SUY0eFh1empycFRMY1hUTEpTRlIrNy9LZW5oWlBUeEN2VHlLdlJUVmZNcFZtaWhkb0k1djlLZXZOb2V2YzZaT0lHdDYwVis0cFAyZjhSM0I0MXozL2Iza2owbjloOTFvRDRXSzk4UFo1RStUeHZ6ZitCOUg3azdWL3FUN2ZWVVgrRmVyVjEzWkh5WG1OOERjOXJmcGw3Wi92ZWt2Skh2N2wzZGMra2duVHRFOU11bXNXbU1UT05jSG9GcnpoVHg2dStyOTVMbnp3OStzMlg5NjEvbkg4NmZiV0FHNTllLy9YbnVxbzU1Zm4xK09UYUJZMXV1TnpQUFA1d2JhcWllWDUvek1mTWdTd01VYkt6SFRFMkxHVitoRzNQZEdWa0dQUWFhemRpR0NBTEVCR05tSVl2OW1Td2FRSSt2N3ZpWUdha2NXUEh0UHFXM1NmQjd1KzhwNGpMZ09TUFFhTjdTUkxZbTAyTW9TQU8rM1FFYUJINlNBdmcydWlpaitKeGpJK1hHbS9CY0F5ZzBkbzd6clhHU2dBdVVGbE5YcFlISHQyNzlyczE4MVp4bGcrZWFrVEprRnNrYytEWURkSnNKVkxFQnVwWVhEZGorODZnK2dQT0I0LzJpMFZTbzBWZVdNTzAvOHR6QTE5M2VYZGN4ZktQMUdmK2JBNjdtTkdQbHdZdGsxNCs3Qy94dlZUUWlyZDRCTGJ2aEtURjhkK3ptZmxzWnp0VzhaZmVzQjdvWmFuRGNYR2NzMHlHbHR4aXNHQzY4UDdwdXY2N2ZlSDkwbmM1WVJYOFBRdmozcytWTmVGWVo2dzZZRzFMUEdvNEdyTDd3SXIzZG1TTW1ldU5GcWpnQTh2RHozWjNkcUdrU0UydTBkOWVhTnFYSHFUQWNMYngvbmYvMUlkM293ZTNObDk3dHBXTVV0em12UTdjc1h4dmw3eEdqYXA3YUh0VDBkdTlUTjI0VzlXMEh6THZ4Tk9DNVcwdXM5UU90TGt6NTJ3YmtmN1F5UkV1Nk1LUUIzRUpyNERRcHpTRzhFUlRhbkdoTzN5RnRXZW5VV2d0TGxYcVdQR1JXcHRUSE5ad2dHYlNZVk83d0hEWFhIRlFuRmZXaDE4RUs0cit1elhTTUZqUFI2R1VBNWFzZU0zRE1zU3IyVnp5bnhCcGRzeEw5d3BBNmtIeHFzdFJ4RldrQSs2anhuSUZxeS9FYzhwUEZoc01HZXJ5d3N2clJ3b3B2ZHlpTkcxbUtoTWh3aFhMRTNGNkFTS2ZPQkxJRXlYL2dLVU1tVnFRK3BiVUhxMjZMR1d2T2d5WFRiTVMzNFhnTVY1RjRTNFprQUk4SUJ4eSszWjlyNGdpUGp3T1kxT0ZSNHByRUR5aE0rZlpnem5NZEFOc3d4RkhVc254ODNMaStKMHVkR3M5MTVscDlBSEhxV0crak5UeDBUNjNDdlNrdFpxN1p6SmhudzY0aGRvRHVOQUJjQTJrNDlvejJZSEZ2ZjU2cmRjR0d4MHlSQmhBTCtWbzh0ZEo3ajJ5RzBtbkVKbW9xTjdMRTJoaG9IR1hjY2VPYTBXWlc2SHRPQ0xSaFk2VzJwcGJPc1JPVlpsMWx5SVN5MkJncnRCQjNMZStPajN2V3FBMzdGNWFHQ0ZZcTdHdmgzWFdIVEdGYy9KZmJxUGM0bmJYc21qVkU3ZDZzdWhOOTFvTEhLV2JhaXZSZ29SamFldDgzdUdac0RwbU81aWp6bHVWYk1nZnBwckhTNkNWb09YQ2NOUXZsZDhiTVdPRWVyTklkZStoT0pRUFhrYkUycnFrSTk1U2ljRXh4dzRXc3loQjVkQWNjbmpjMVVUazJOdHE5Ty93M2cyb0E4MjFob1hCc1RYbUE0N3E1YTRIbW95S09MSkhPalN1WmcxRFlVOGhxdzY3Yjk3cjBZQzdYZTZRZi9MdFU3d0NkK3p5L0d6S09WdWNocllXYWlNN1dWS1A3Rk5wekVvUFVCWi92V25adnd0K0NTSzhQeGhxM3NCN284VmgzSCs1YW9BL1BUUTM1YmRxUVJWb1dxak1QejRKOXMremJWNHR1Qys5NWdmNWlCcyszQmVmSlVxclVBWHJNOEhCcy9KZGUxSThEU3hXdkxLM2VtY0x6WVhDZkxWVnNyQXlPRGJRV3N6TEUva1NSK2l0VTM3NDlqWGlXd1huT1E5aXVNRkZqcHFIVmhaam5HRFJmR2ZZakxvRXNRWjdSQVFwazQwUEcxOXgrVFJhWHlWMmUwYWI5ei9XdGphWkNiekJpSHdkQzgvNWhSTEhTa05teTEwVTZhRG1NSmQ5NGR4TFZCOHFRMFhJOEtPV0xQSjNjNHl6RVpGdytITFBHTmV0b0wwbzBrSTZOUFdELzZYUXZENlNCQWRBNUlWSTRJWkpwZ003ZWc0dDRoU05MUW1DZ3ZjN3pvYVNmSmVTcjA0U2Z5ZUlDOHNtMExjaXJDZjEvYWxsZXlMTmgrVzY0QXE5UWFGQlQyNExkZGZwemJianRySkYxRVBGNDlMaFoweDBCZEdscXJJcFhjeG5SOFdEVlJmNldUazBqdm4zZG5rS2VvaUdlTnFTUVRVb1pVcWtNU2ZpZXZ2TG1YUnJTL1ppUzdjWkVvMnZ6TGZ5aGZOYm5ScnNEbEdFemxFVVFkZWwwakRQSXk3b1NqbEhzaWhRdzJoMWZydmQ4eU0vRStvNTdmSXV5TmVVMWNIKzdwVy9SbmtzQ3FndlZ4ZlFVcG10U0g4U0tPSnBySXV0cmRqTWRjMmwra1ViRE1RcFhxUDRLSjhSM0Qyai9pbnNpUWY0L2R1RjhESnB0YkZzL2cyWURGZko3YVREWDl0Mi8wcnowdHJCU09RUEs2Ym9zVFgwb0g3V1ltYXBTSDlkUXduSjVxa2dNMEp3QjBKeCtnK2NHRk5ZcjF2aEN3TGY3d0dneGlaek9aRkxxRnh0WTNSWmpiYUtYOG51NzFqRC9Qc0U4MXZhN1hSdHBqTFhjUWxEZFVpQm1vUVVMeXMyRTN4RFpVcGgzY1M4UURVUTZiYzBWcmpuUkV6NkNmcWVlSVNaUXhNWlVFUnNUYy9qWjV6bGxydHRNZHE4Z0IzbU5FQ3BpbzVid1ZHbUI1YllnTnRKMTVXL3hmbTdpdDBiK1hUWWNEa1pMOWtIb3MxS3R3VHlPQkNQaG93STM5dldZd1RVZkhBSHlHTWlqa2J3WkZ2QUlHdU5Db3hzQTNiZkRzU3VkYms1VWthMHA0b05sUUg1Q3ZzTTA5V0NSK2VBNEZhbG5RZHJDYW9vdzFtbUV1WjVIdEFCNE5rUnJ4TGVGNkNoZVhNOTkxenB3VFNWbUtoTjhiWkI4ZzY3Ymh6SXdsSWVOUDNTNkNjZko4R3k0OGJtOFk2d0cxMXdnR2s3NTArZUpUa05WamhwM1JlemZoRElFcWpJOE54N3JNV01ySXNUT2tOOFRyTnBXeGhvSDRGaEJLaHZhQ0V0RGRkRVNzRHFaR3lNWWErTFM0am5ZL3NoU09YWUZkUXk5RHZGdXZ3WXhPMnBIYkxqSzhNWlRodzNRdFRFK2s0ZE1wRWk2cFRnQWFOeERrTDNIMExLNHBKUWhnMndKM1JZRERLNFgzUTBYbGlZMnA2cW9OSGlPdkNQMW9uU09qci9TNkVZNkZpZ2pESkdGdU1PQ2NsTjM0VndaUWdQSjJsS3VJbDZWNXJPd3Z0cGIya2VZWG9qMHVnQ3hDYUxGNUIyTS85a0FxcFZsZW9WcXN5TDFDK3M1Y2dRbndVMHBWdVNXbEVLRGRLeGRLVC9XaHJXTko2czBHeHNTczFCRjF1dXZyRWF2MWF4bzR5cWgzWVhXRmx5STMxSzZKamlDNEFHMGh6aSsvUXJqQ2xaWUtQWE9tSmdTdmlCWmMrUGR5UnlEOUNDZGJnYktnNStjTS9MdXlCS3BEdnQ0S3pDam12RDhPR1g3QTZHMkRaK1haTmROMkJWVEhJVDZxampUcEM5aGc2N1NoRmhwUmZnbS9sMW9VanBueExJNEFFaVBjcG94enlGTWduUS95RmNOa1lKOENHTSt1L0dNOVpLZUpYQ2ZyZDVrRlBVd2J3TThoM1ZkUmVJajNSRkNyVDRBSTBjWUsyeG9kRjBoMXJnYndxZlczeFBxeUJlaVNjTUdwVHY0TENuaWNxckhUS1RWb2E0c0xKQzhhVEZRdDE3Z1BXcTRYWnRoMEozM1dGL0QyTENOKzByb21XLzNLWm0yTEJucTU3bDFNZXVCMVFVWmo4UzF5WmptODdBQlRJNE5kVzRKRUdZVGJ4QmYwaUIyRkJzMTNRR1FSL3VhRFdsYWdEaStybkpnb3JZZ3RoWm9WV3hTT3Ixc1FQcUJPaVhpS3h6enEwbmZXSGg4VkZOdU1hRUJ6d0hVaXpsMFIvOGlkMVlzT0RiZURYL2xiYWI1TEticjlxc1ozOWpQVXMzbWNSdFFWMThva0Q0bEJTRGQ0bGFJSVA1Q01vQWUrM0RlQ2dlbVBOZVlHeHZITnlMeUlzc0g2NHBMWDZWSGxsNEhFRmRmUVgwSjZsS2EweVJqWmgzRkVTWUdKMHlKcmp2aDJjR2MvOExYdWhPbyszV0FMZ20rN3BSbDI4MnlPN2x0M0MyOHUxRlM3MmtJZjd1SmVpMW1ydGlZVDBobGpBcytZLzJSWXlkd25VUTZkeGRnaTRMNjBsd1dCOXR3OXgrcVNJV3FPR2hBT2RLdC9QN0JUL1JDY1IxN0l0Mm5LeUhkQnRXVE93QlhvM2dZV1JyTWRidU0vNUhkZmd4MTRqS0cxY1NIQ256ZWNGUlJEM1ZIUVBuVGlzVDdYY3RuMFIwZncwd093LzNUbkpFbFN4MlhuRjk0RGlDdCtGRFdLQzJHVnNWYlMrWnk2OENTdWJVYUpSc0x2Zy91UWVxNE9uMEQyd1NFbmhCT2dUSWQ0VlNNL2VvcU1wdWltbUt6Vk05Ry9LRUJqTGhDLzRUOXgra2VBdDIrc2tZYzFuKzdTQmRXZ0c0am5JanRNZlgrM0pBNlVLYytRTS9LcjNOSko2a3pRSGZZbWxibjU3S3puTXQycXVPRVNxdTV4M2pKKzQ0QjlWUElGK2E2TTBqR0hNcGltR0Q0c2Q1R3Nhb3h3bkpEaUFGOFNxOFBFRjdDMkFPOUIvYlp6OUs1V3lYbmp2QXpxeis4V25Rbk41Wkd5M2o5MlUyNld2ODVyd01iN2M1Y2FRdm9uTWxEeUt1Wk1Wd2ZMQk9iRGhtalJlN3JpZ3AySFRIaHV5TmtFekhheGh6YkdDSHV5OG45bFhlSGNER2tQN2MvMTdqUkhjK0JFSjcxZStSN2dQdHV3TzlpODlHRFo5OVZwWDVOZDZlUnVob2p1eC95RzdRN1FPZWFLeFdlTFhmNmllZENTblpHb1k3OFdxTVFuaDNkQVpNdGVtb2lTenVLell4NXJnLzNZNjROVSt3RHNWbWdEQm1JRmI0ODNrSVp1UndyOVo2bDAwS041NWhpdTA3YWJyUmhmUUsrbmRoL0ZyZ052SjRJQjZZeWkyTW5xYytXWGpiZ1hnOUYyVExGSnNWekxNUmNpZHhHZUZyYXFsT0M1K0k1VFBZYW5kZm5yYnFhOEpuZzJRNkFHREd4c3lMYUlQWnVwRCtLQ3FWaHZSTzdOaUQrNVpCdGJXVmdtd2xON25nSXlIekwzK1hrSWRGallCK080R2oxRHNpd1RXYVhKYnBQd0hPalNJbXZQaEg5ekphbHZ0ZHlJQjFBK2JTQVk4WTVCZTErRGVJb3JRWFA0VTIwYmdOdVJySklnYS9TVnYzYzZvcFhFSU5IaU9hUURnNnhXWCtzMDMySTg1cGF2Yk5RT1RaSzlUNnBEM1MzUi9nbU96VWNzRUt5bmtNeWpWWkZvWjdpZnFtSHp3M2VwN251ZG9CZVorYWFnL2M1MGZmU1dvbHdEeXJYaUdEVm1CbHA4VTNjczY4VzJPNCtzbVNPWGVpdHhpeHZnMFoyZEhUSFA2b3BZZkVjcmpsYzBKR2dQaWsyYVRoMnhlM0FNNEp4UDllYzh1MCszTE1KNHE4V3hvTTZHVmUzeFRTMCtzalNKR0ZsdEppcElpNkJrV0lPQnRXczArckNpbWRMZWE1Y004WTJ2T1hjUkR4dkV6MUFlU0hFRUx0cVlrSWZ5QWV4U0dQQzdVUXU5Y2VHMUFkOHkvdWpaT09GdkhvRjlVZWVVeWpJcXlDL2d4anp6dmFnamw5VHhRVVpjNGJwa2MrSGJpS3NhSENqQ3B0c0JSMXlaRTdENWNwbzk2eXV1TEJraVZsMDhidXg1aUFkSHRuYmtlLzVrYXEweStaNC94THpmblN1aXI0Rkxxa2R6WGl5cElEa0hCdFlGMGUrSkEzaVpub1pRSnlOZlIwMXF4Y3pBYnJITFBFQjVXTUZiTWJHT2h3VHkwZzM2b09TajJaTkx5ZTJyMmZaRVZZR0MyVXFPekU0TUZHazNqekptK3JHMDZnRlVvd3lrY1ZsWUVKOU44bXI0aWdvUDlFNWdPdXVvVHMwSUxiRzl1Wjd5N3Q3YmpGZkgyOGZxbjNQTGVaK0lPaDd4UDBzN3A1YnRiQTdyUDVuMjdQQ1A5TGk3aG1kQTFDRGNxMWlQSnY0VUdLem0zYkZUZ09OSitIWjFmUEtyZmZtOTFBN2JEakphazd3bWY4RDFMYU5oMWFremdxN3NVazdpSWZjYkZybnJmeTFNSjdNUm5WSU84VGUxcGdvUTl3T29uMHA4WldnczRac2Y4alh3elVqSW5NUS80WXl0Rk5YRUg5TmZCZVlIMmV5TWZFRDZlME9NSWc3ZTRUb1gzQU1jZm1vU0E5SWx4c1UvWTZSSXViOG5WdmxHT0lWRUhOWXBKN2hZeW9QMlQ0d3ZuaXBUWlJ2alFrL1MzMjA2VjBMZDQvck9BcXRsOWl2YVRsZW04aHR2a1VGUE55N0w5VThCV0lNdWQyaHRDbTdLczMzRS9iZkNoWThaeVZiQjVJbGNuMFFwSE9HOGozSDIwb3lOY0Zjak9KaW5Ld2lQM2FLZjhkeWZVREprTjlLaktzNzdGU3BtaWUyRDZmMkM3NUYrWkFuNWZyWjM3NnlJRDdMdk14c1pUTHoxZlJOTkovQkdOVmV0aUY5OWdwNnJ1eE9DWFlQZCtzaEIvaFM4anJQRmwyMTVMK2dwdDA5OU9LNzRkWGRBTjJGZVp2ejAxRW9sQVZoVjJJZjFtTm1wWFBDUkJVVkg1MC9CNHo1US9YUkdPb21JMktYNk04MWlZRXl5dFlnemhFYjA4UnVJYU9hMjBIUkZ1a0k5Uks5Vk03bmh3NjZydzU2MjhBNHBIZ0c4L3BEQ1hka2NxVXR4OTNKdzZJN1FYenhZWnMvam04YkVKTlNPb2Y0VTJLeko5ajF5b0pZRitxOWlmMUxGZ2RqdlkzNjFIQjh4WGZETmlDeGxZdjFERU5pMzFWbSs5cnVPeU8rWi9aTi9hYWxNZlJyV2x5TGUxOXVmTHoyYUY1MXlNTUpqcDVxOFNJbjg4RGN5UE5wdGpDK2NhcVhGR09Jb3NUdmx2Z2pvTDZrY0dDRmZJMURacE0rWDZBM09FL05NZURlTzVDbUVuMmR5TForbGM4VHkrK043VWRwUFE0dXhkeTNPQitYVDJ3aUZycC9Hc2xyWVpYVGwrRFpFMU9hSnpidXFybktoVGlGcTdzV0VDS290eWdvbnFTVHhLTVFlNkN4MnFTbllSN1lwMlFuMGZrVDNzSDRpVzBkbmhtTWZUcHpvNDFzSHlrdEp2eVErSk1TekZJNG4vbDVRdmxWaXNWQzdTVG5IdVhHd3ZOZm4yN2FwNW9XMzlnalIwampnSG11MDRDNFFuRllTbXMvQkh5N1ArZHZpZTgxYVRkbTZscTlNK081Sm1YazdNaXkwN3lDUEVwdU5jVE1sNFhpMHVKRWpnaWNBUFUzRkNjbnQyNGNucnVKaE16L1NPSzJHNWdmamtnOGVMdHZiVnB6cUw4ckRrdmptSjVtc1QzUzU2UElSaXFVS2ZYQlNtNHRNbDVGczFFT0I2MGdYdDR5L3B6ZmZjUCtRLzRyUGJpSVg5SlEvK3l2a08wMlRqQVg4a0dYL2MyeE1tVEkraVA5cXBHbkllUUhtNkx2U0s0Z2tqZVdrVnZIYnAyc20zTUR6MnlNOEdnZDdtUGU1NHI4NEFRdlozNGRSWUpyTy9CMUI5c1R6T0VWd1g2ZHNVNWI2N2l2d3VkZUlkY3pIbGprajFaM1NHVnlDTXV3cUhlemhnZVg5eGdQaXJsM3I0amZBcTR0OG5rVzQzTHlzWjg0anBOZ3VWSzhFRS9zT29PM2podUsrRnZnWVA1czBEaCtFZG5Kc3BoT2RQWlQyMVRPZHBuR3JtRXNSVU0reHBUam9KSjRrQXh2VmI2ekZrTm02VFRjZXlTUElXMmxmbWhUWkVOSWQxRDNVampnS0E3VTNScFExa0xlZEsvVkJ3am55RktpejZVOE1wUWxaa2p3a2dWbGxsekhmV0dmWjhXNE1NNEl0Ym9DK2RMY2dEb2ZMVVArTmxYRlBzRWVXVHQzbFgwOVJPVTRITGsxUmJLcy9EdlBDYUhzQ0RnT29UV3VpTitwd01iY2pRLzV3OE9hckVYMjcveCs0VHo5SVRQVjZrYWlENWV4QnZITHdqMHAydDNRZUw4d0Z2cE92RUsyWFdSdnk1M0RWQzkwMkpWNjQ2RVlUUDdMYmIzcldubWROQjJISWpHQlZwOXVHQU1QejJWYTAxUmYxUll0RzhXUVlIM3dOZnpyVWc1RFBsb1Iwdi9XYkcyM2RZeHg4Ky9xNkYwa0E1SE9XYlFYWi9YK0NRYkJhNis5ZjV4M2N2NVFiRC94YStmOEgzSjdxeC9qbEx5aXBZZ0tTZzlCUHBVa2RubTRzSFRpZStUYi9ZbU00b1FHY3lQRlNDWC9wWlNYYzBYY284V00xZU51MEhlYXpVRGRENTdSUE0wV2ZSWjJ6eHFLa0o3a3lMekoyVlN5Y1JDNzhZWXgySkNHTy9BZFg2YloxZGZIbXpzK1pvVGtmS2J4YXNrWkdyNHNQcGh2MWNKQy9IU005QzVpMjhuRmlEektLRVpraEd1K0l2c3R3Y041dVV0RG5VMFJLVnNSQjFPSVhkSnpJL1dzT3c3SEk2enh4QmF6Rm8vSWMwSk5qcTk4Z21QVytQZUcyRzZrQ3laeGMzcWR3WHc5OWJrTVZqa1pqdVA0SkdhdTA0RGdHdUtUb3lGZWdyaTJGSHNjWDFsQ09kWjhjbU1obkNiMXJMVzQyRHgyZ1Bob3pmN1RtQ3ZjS0ZTazhVS3JkMnB2aGlGMnhmT2VIbE9nL1Iyazg2ekVGRHZXcHZNL3dqZEdmMCsrWVcvaUd5UzJMUDh1aVdsSTlFV2QwSXJ1Q05pbWcvM0RTWnhNa01RaFlqOEFxQlg4NEd4WTBtUHpZMFp0MEFyeSt6V2prZzFvbXh3dXlkVG13aENYUVhjMXZlcXRlTDlyTTFCL2JtajFrV3M0S0Q1elN2S0drTDA3UHk5dDE5d3cxc04rUGFSRHNWTlpZbXJvZDhJUGNGdFFYMHZ6U0pBdk50R2JjMmNQbUp3d01hUkJZaWNrUGtHRDhNREVqb3Z0TUxJRGVUR3l3OEJ4Sm5oelkweDVFUnRXK2dzSUhnVEVOdHdZNjIxbWxmb3JxdnpWU1Y2STB5Lzc3SU1kL3RTTnRxUHVrSnJJRWp3M0EvQlZiTVk2Tng1cjFwb3UyQ2hqd1B2aDFRTEZFT1A4TllSbHREcStPenFKbFNYck5kZnR0ZGorSWgyeXlibThza2pNK01xUUdNVExFbnBIUG15dWoveG1VS2JwcmhCcE9COWdYTEt2V1ltOUFObVpjSnJwN0I2T004dDNRN0tQMUpqQzhqbmpuU3Y4SFJ0cGRUZytQdjlkWGVWUWJFd2hYMDZuVVJ4bElsY3hIeFhaaWRvcTduSFhobXVaNVM4a05vOEUvOHZ0elBhU3l4Zkk0a1J3M0FqaWwwYTdReWtvVGpQakg1Qlh0Q3lmSWJiVkhOWVlSVDFFeDJodGszRmlIYjYwZGoyN2NRWEhpZE9Ecy8xR2ExN0VFYjdtRG1LTkhsQXlzZ1hjRXRrRXo4V3RoV01UMkNUbWh0amVIa2pzQUZ0VE1XM2cySm1TRDZzM1JHUG9HUGk3V01HOEZlVkVFRHQ2WVExUlRJS1UwV0VhS3pKY29OK05YQnkrSW8xSmJKWmVpQ2t4YUJCb0xUeEdnMjdHYW54bG9WampTdDBGNVdBVjg0eUtQQkdkUFpLalVaUVROTFlYR2ExbXFJcEdJcHZuZkIzWmk4WUtQVXJpdE5FY2RaZkliTGVIN0phNkl5QmZOczdwdzN3UDR3YTA3bXUraEtLZm9IRkY3RkVZbytSaWNLcjA4MjZMU2V0bmtuMUVlNkdUMkJ4VVAwdnFJVnV1SXZZVFd5VEdLU0p3c3hnNmcxS3gzUXI1ckk5YXR4VWY5VXByZGpkRWR1SVZQck00VGcvSHArQ1lvV1JQVXg5MWlsMVFITE9QK0VCU2p5MW1TTTJPVEE1aGVvYlloeG9iTGNaT2NCQWNLNVNYTXZidkVJeVF4aCt4U1N3MWYwdjVFTCtnL2JPOHV3ZXB2ekpFQ3EwZGptc2JqdzBrVjY2cTZYSzR5VWVTbk9HRmhmaTcrTENtUjBLYWtGdFhDQ2ZsOHpRek9RalhZLzNzODIzRHc3a2lJVkFJYjRSajFXMW1ybkVQRmx3L2VjaE1relZTbkdhZ2NjMDZwRWNvODNyRHF5VHZCV3l3dWN3MWJtRGxjM1g0MjRHdjB5enlZZVo1TXJKVklSdkZsUENOWm9SOGRsd0hvRHM5MHJ5ZmF2NFA2VmVGNjgyeGNjN1BsOWlzcUl3K3MzZ2F2c1ZBbk5tUVJRclY3aWlmaVh0U0p5TDFpYVJ4Q3lQNGJkbW14aUY3OGNyRGRTN1c3S1dvSnMwbnZvWHJQQ01zSVdBWi9aakVjYWJmcGpVZVAvR2NNdGJhZlFDL1FmcklLTk1GZDR5dmFJOTQzTjUyc281cG04akh6VEs2WTZ6dTAzb1pHWS9vT3N1NVRMTkJOMzhmN01TeitpdCtvZDU0eUFhWnI3dVl0SkhrMTkvYk4zWlNoNk5JTThWMTRsdmtySzQ4aTBlMVV4bU1WeWEzVVJvL04yVEdKUDQ2bDF1Y3h2SW1NcERJbjR4SFFobDZGNmZ5dllqanYvQ1JTYzRVcHJza3A2ZUI2Q1dSejJwR3h5RG5mOEkrM0xvdzFsb0xrdDhBOXdYeTNjRjA2MW5oTXR6SEo3bFdKSThFNmpFeWl1WEJ0Y0NRZnhxdUtjZFlTSys3MmJ5ZVdSMlNxNmliN1dkeVIvTXp1a1A4aTVmV2FPbEMzT01zUHZGSTM3NnB5S052Qmtxck9kYTU2ZHlZM003UjkxbTltYWhyWDZWamErR1k1Njg1bnBMRTBjTTUwcklJQWpuQkNKd1FFZXkvTkVRaE5vY2I0eG1TbktaSVJqbUFxSjdBbC9KNWIxayt6dEd1a2RobkVYekM4aFR0d1JkQ0c2bmVPMHp6cEVDazdQQ05xeWhmNXZQY2tQcSs1aGpQMkhmemVTTFhCWGhPUWxYeUlXOEw0WGdUMjBOWFRIUVZLc1UxS0E0VDhsTHVNenlISVBOYnBYTkIvRExCM0hxY3hDRVBnTUd4UHJyUGh5TzR5VVcxTFdoVjZ2dEdNWS9TMVdOR0srWDFHWGV0cTNrcE44N3Z0aENPancxQyt4Q0hyK1hINS9JaXErTGRpUjlycFhMTmVuWjJEcy9QRjVIc3BNYm1NT1B2V251S2RZUWtuc3BwMHRXOFBzbjFHcXhRbkJ3bmpMRWZFbU1Ha2M3WnNlckF1R3YxOC9tNHZpTDE4akVBdm9IMGl0STZ1TDBVbDQ5eThtekVOYWY4YmFaN29maWYyK0tkSTJ1MVFvaU5YYzdGd0ZYWmRneUlKVnJNUkpZU20veDZyQyt1M1RtQ2JkR3kxUEVWYWREQS90cUMzZ2g1eXdyZlRUaXlVSzBrYkxPS3RicmlrNXhSVDVHUVA1dE80anRrdWhrai95V3lLK2J2eUVuNUpkTHJGSkpieUxjTmJLZWgrN0Vxd2pNL1JqNWFMYzd2R1k2MUp1TzNrVThIMXgrZDNwUGNOMVZzSUZ0UnNnN3dIMFJmWEJQT1BVYTJUWElITzk4ZU5IUVVJOXdmbzdpWFhIdUV2eUJNcDBBc1BHUXNRcStabjFhOHdURVpXUTVEUVVjdjlJWDg5eUFpZHd5bnRXV0lqUXZIVnpsQ2hOYTRBc05VbkMyU2Z6ZXlrcHJJanlJTGRYQlhSbm1TRDVYdHJPY3o0blVUNjZpa2s2Mkl5N1NXNXd2MW1iV3oxbDJ2bFRIbksvcTlHK0sxRWVrOEhmYWZkWHJ3dG1QYjBqL1NOYWJJbmhBcmlLNEdjNTR6QU00eHpPdGJpRGRNZElkZEtFTm1vZEdJOStiekFYQWVkTEVXSGNibWVQL215S2FDOHh3Q3JhNG50aytNU1IwNGJ4Ymk2ekhDVDF5UmY5eFg0eWRmaTV2SitmL0V0enBRcndUODVuY1hzalR3N3UyYmVacFB0Tmo4cmxidjFDQjJ1Lzl5YzlWcjhVbXNxd0xuck5QanVZRmlmdGlwNnFMNWIreFBiaUg3THZKZEpMUXVDSjFlNHQ4bWVzaENveE5mQ1R6TEdUL0ZQcGFyc2k2RTZBUGo0NXZjZUFyMmxDU3ZJOGJ5a1UxdGlrbXVCOEt0NjNXcUl2NFc4cnBSd24reHJTck5hVUo2L0phOUVEYlVqOGpXdFpRM0c4bjBjbzU5TGdERnpSZ1lJeTBOc1ZuRDl2cEU3b3pIcEY0R1EycCtXdytPVUROb0FmS2Z4OFRYb2krOHUwZW5TWFJpT0c4RCtidkZ0QWJORXVJWUtBZFRiSkxnbGp0czI5TVNIUmhpRm1sb1RmSi81OTdGWjBCa0cwaW1EWmtReWpKVllnSWxsM3Vtb1p5Y2pvL2lCSEhOOTRobnNWNFAvOUVoTnVQQXhCQ1hZOTFaNHJaRWhkSmFCWnhJY2ord3ZvWGpiNVp6emNHMlhYaldORWtJREE0c3NNNlorZDF5dVVqa3ZuTSs0bS9SUG1ZNTBpVDNuZURyU1ZrUGFOazlxMnRmNGIxb0p6VUxSOHV1aU1kRE1OVmRvbCtSMnZhZmN2cG1kbzZUc1QzZTV2QjZqYndIOVRVMmVzRC9uZFZTakRIV2h1UEl2dWREOGczMjk5ejRTZXhEVGtkbGt2cndwSy9NSjllYkZQUUEvTjRYRC9JeFRGOFp6cDlnZllMWWtLc3g0TmI2SVFmRk1vbnlXaDBIK0Z0dTNZcnpidDJFU3M3WDJMTXBQSmNXMmJ0Qy9FT245VERxcGZJMmxjV1dkemR5bWdIQ1pWQ1BZenR6alJOYUtzbS93TDdTSkY0NnRTM2F4Umd6WE5jUzVSTFR1RjRGaWN2SllsSXkyb2xJalJ6aU4xa0dKckliRHlpOXhRd2ZwdXdYUXZjNVcxZE9GK1hZV0JiaG1xR2FXN0hzc0pPdTA0OFZrYTBwajVRamk4dVZrc1lta0h5a0pBNC9HNE1sSjNWa1d5a2VJLzVmZkQ1a3NlOFYzbmRSTEVqTnlPVXc1c2NDOVhlNXZWN1RVNDhidjVxRm1qQVAxck5VaStSNkI4alNBSlJyNktROE5ObnpFY29scFpEZTQ0YS9ramo1dWVhZ3NUZWZodzJVbHlPMzhyWStaTU9mbzV6WU5oTWpIeS9LdDBKano4VzFKVzAvd1BQOWYzekwrMFBnd09MTzlqN3hiSVloOVZ5TkQ4eFAwbmhPUzI1NVllcFRnREtMRzJIYVRPdEYzUHpSRlJQKzA0blIvZldRbDZPeFlEcVZpN0dJV2o0V1VScU9jN0dGdmZrZDlsbE5ZSHNhVGZrbThlWHFOak0zNkt0VVpoUnc1UzIyMGFBNkVQQjgzR2F4ZTJvUm55S2J2TnJ1ekEzUjhDcGkvU0pUcElJOThWdk9IbHVCMmVKcEtndHdqdktOUit3b2tUbGs1a2d2ZGZONWNxaWVTclZOanI3eDAxd0o1SmRFOUFMbjRtdHVhaXUwMW1QWkVQNVl0N05qbmEyY1h4VnJkY0ZWVzJYL1FhT0I5T3hjM0VLRi9DZTFTOUtjemxPdVNaSDM3N2tXaWJ6SzFnRFR6UkR5UEVkWTZURXplbVI3RUNjN21VODI1M1BqbG5PakRyR3RBT2tRem1uQ2M1Z1BvYm5VT3dEWDhsREdHbzVwaHUxWk1vMW93aUV4aUN1K05RWmRSNDk0TnB3Z2VTcnVWWWZ1RDBVYXJBeU9uYWh4cy9RZDc5OFY0aGs2UUhHRXZNMTRyZVllNFhra3BwZ0MyUGNNVmhyeVNVRGRnQnBycmdEbjNDalF4UkROS2VBNXhkZGRpT3NJSHg0Mlk0d3RCYWhUajNrdUJPYnd4dUc1UHI3bnl3RVQ0cjhlcXhLUFpRV3hkU2pjQU1xYjFSMnU5WVQ5M1RSWXFaaS9RZjJrQnZWdTdOY1RvcXhQWnN5emc5NEk2K1d4SWozazhFOWpySW5DU3VmWWliSTk1eTZKVzBmeEpicURkT05nemE2VHhsNVFOYTJOL2M1d0Q3NmkvQ1ZyYm5DZjV3YTNYSFVkK040RGZENVRwR2tUK1FwYnpab1dOK0Yza1VvTGpTeDNyekhSMnNJMHE4ZUUrKy9VZTRTZkwrRDVuU1BNbDh1RFVqaGhwV0srNVduMWZnMjlLOEU5QVVtY2FKbUh6Vk9mOGkySWxIb0g2UFdlSmR3dUgvUHhzQm90SjN5VjhOcWFKWmV3WWNLM2svaUFJaGJqRWU1U2svT1UyUDVicUw2blErckpCaHY5M2JteFZXRU9naDhuL0dMZFI0RDh5USs1L3Zib1ErV2FLNFBRU2RwMnpQUXpmM1hPWnNRQnAvQXQ1RmRKL3dsMmpIdkVIekdlNi9WQnpzZHdFNVl3WWFSd1NmNVhmNjRkT0c2MGIrczJ0RndiY0U4aEwrb2xPcnVkeGF3ZzdKWERjU25OSUV5aDE1bXhqSHd0dUMyQ295SHRGdkI3UXF1b0J0T2p0eWttT0lSbklsOHZISzE1b2ExOTFxY1F6M0d2U0FPVU96TGltb0VxOWhzdHkyZHh2QUhDT3VselByMC9FOXVNU25HRTJGNlA2Qi94TlNpYklpV3RIWVo0RDhZT0xhYWZ4WHdqcklaeTlwUDZCM21iS01TTUd0MkFhenlXNlQ3UTIwbE1ZalBTbk13WFR1SXBOOGFSUENCZkFvaGtWTmY2WWUxN2lNdEs4M2xNNHpBa1pCdW9ZWDhFaS95Yml2aVFZSEFTbTRIOER6VWNLd0RsNGRLWDZ3VERGMmt3eU9xc0xraU1BbDVmN0hOZ0FrTTBpRzBQeWhLQWRFd2thOXJFdjNsYnRNOCtKdjFTNmY2Z3ZOTEV4a2pxdEVUbGZWN0wrY3JxVTNjVWU1MHVNS1pKZllOVmMzTnp0cTYwUm5kcTc0SzZQdkZ4YVk2UXhHNVVuS05SWVYzMHBIL2tpKzU3eVI1QXJHdTBydTd5SmROMSsyT051bENqMEhPOHlBMHZBdlVpOUthbWV6RlhRV1FHbDdIcWdLeWFlbmRZQzNGRnV3SFFVVFFLdTRLbmp5QVNwSDN3YkorQnE2UFNRdFJ5SzdRVHJDa1hPRGJVbkExcE1DZkk2WEh0NWcwV3QzZHZNOGp5aGlyOWwyWkJYK2llKzJ4YkZ6TVRlS3Boemk0TTB3ZGU3Smh1ZU5oc3NNMlRxYXFkaFhPMTh2R1hOMzVWRGdlYWxTSTI2SVFIZHdsL3U3Y1pac1F5S0FZeTVVRkV4cUY3UW5mWDc3S1I3Ni9JcjVKVnpOVnE2RHdxWXAvU0hWQXpSeWhuSEpqdGg0enZFWm9ZdFR1K0FYR3ZhSUFCaW1OYmpoTy9jK2IzeHQvSU5MdVF4WTZ2b1p4TElTOWZMSjRieEZyOVpwMnYzcks5eDV2TU4ycUlEVWF2TmVZYTZNeTFlbElqSU9zRCtUeHZtNUhXQmtPTmJ0YXdiYWZmZ0JoWWUwemxiT283VnlDRjBOUUM4aUtFM3grOS9KMHVxQmJtdmMwTWNUMFdDZ3lTSE1tYjFIZWY1WWF2c204MXJ1bDJ4U1V3SENHNHQ1bXBJbllvSmIwamhhbkwwbUNpdGloMGQ3anVLbVB0aTJmMXhOcGRZdmN4VUw2RWdNWWxPNlBjdXVkaUJjamNXMG5PNEFTZmpGSmRoODB4QmhXbm9MNTJDb0l3T0MzNTYxbVpoNVVpUGR3bHFxd21zb3NSZVJlYjFvWElTTTFlTlF3cEh6M3JRV0FlVUxwTnRvM1lmUG5vNGF0NWQ2VFg4empNcEFDUDAxQUl1aGtoOTYwanhDTmFtQmhTeHpmYTRBczhGb28wcnVYQ0xyQTZSVEd4S2lGVjNWVkdxS3hpVWhhNUVNcUJ0NkEvMWpuV1ZzV2xqNjZxWEJWSWJhbzd6Y1Y5NlJxVTdwQmhIbSt6YTFwSTZZNTdqVzRnOGs0Wldzb0tPa0FXQitpR2o1SFRuQnZFaklDdmlLaXRIeGRhbUtEUUhpUldVTXB0NFFnaTkrT2paNDFjRkU0U0txUFVqSktRS2tsVFpXT2xub05GM0hLdXhGU2dTQXFBcEsxd2dtMklldHF2UWJNMW1iWkNkQVd2MUtGbGNmR0ovOEtHcmNUc2lsTTNLRHl1RHNpdGV4cWFtVEh6SW56WFMyVkVrbkd1ZjdkTy9sY1g1aktjcVJlTzZ0clBabkFnNDhlQ0h6TUVwSUE2d0ZHa2ZwcWtUaExRN2tnZ0R3Umx2dUlJS2FEc0RwblBpVGpUT1pBbWZ0N2JETjBqMUs3U0lJSUtROTVZUkw2QjFEeEd3UnlQZVVhRUN3SVVtVzNmaDhJQ01jTmhkbEdRVmcyR1NXRUdhcUlOS1VlVk9xdkUyRnp1YTBCMTJJRXc2RHhPOVU5OHE0UHVzOUh3UlVRaDMxNGtRVmdMVlVnRGZqN3hiWGxKeGc4QkdkeWRKR0NrTDBzMzVKdVMwdzFUQWc1U0w0RnhtWjZ1T2RqNFZpbzhTOEVPZUsrNllqK0VDakxpRmh2bVZqSVExYUF3NUZ1ZFg4Mlk4VFduSHhpb0lFejV3dFUwb0JoU1kwQXVkcks2TnROOFR0YWRBNkVtQ1RYRW5ETUJ0VWFaall2QW5NMWZnRXB3NWIvc3NoeGNBWHBBb3EwTDJaZDNoY2d6YnE4Ym9ESnBaTjlrVmllQUxQUDNjUEVmTTg4U1hMaUpPcVEyV1NnbVdsdFlvVXJ2RXJMT1lzU1NyMXdEc05halNvUEdBMkxad2xVbTZRNUVKbHZZc3RMdXpQVXZlVFpkUkNSYjJTZUtkaGg5NHRrT3hLUytKZ3EzU1FSSjYwanhWcXdnaE1SWUJmdE5vclF3WXRIcVF1M2V2bGxxcEQxZEVvRHVUaU5OWks5d1paYytwYnNkVk8wZXZ0ZEgyanpqYWx6VGx0TW9OZFFQMEozR1dHT2I2d2N2ODlhUnZlVVJIUlFxTXJMS1hHc0xvVklWOVpnWFMrMitienFqVC95WFRsdDlTRVExdXNoS0dFMFhuL2hTZFJxTVpuTVJqeUQ1bm0wL1dDa2lxa0JUVlNJQlJVa1dxZ0p1aStpRTdSanQvbFJPOXBGclVnYmJuQ3VnaWF2aGdDYmFBd2xsdFF6bXhzcXplby9NcWtyMGZFb08rQzdBWlFrRVlNbFNIN0kwQ0tJc3cyRmpWR2M1Wmh4VkZBS2wzYXNFV3o5TzlvK1QvUjFQZHVGa0lkdmJDTlg2aTFWeGdQUlhtWjZHbTJ4eGVsdVpwREV6TlBnRTE2MDNOZnhFbjFWRXhUZFpZZmo0eGJOS1BpNDhaa2VvSmZsMW8rVDdrZEhLVG4yblpraklwbVZ2bTh0aElCTzJQVmdwWEdxcG1CdlM0Rm1qbFdlY0Y5QjVSc0JhUURIOFU2MnVmK0svM0M3MHhUb0UrUFhDTVVQMUFxaWFDWTVnRVhCSjVXR0ttdTVrY3VQZUkveDlSTXAyWXVQS1JFVzZGSnF1blpvaThQYllWY3pyTStKYS9seS9tSm1oNllhMjUxNzRIckQxK0FpUXdqTGlBM0xoRHdBNlh2U1ZwV2Ntc1NoUFJ2RDlrdnA3b0NGb1A0YWZOeHRBTWh5UTBxcVBkT1BSYVBkdlNkbkRFcmt6dEZ3ajZZYWpaalNxRDFZanVqL1djdStkU0VpdTdVZnpJZ2hWMTFDQjU1ckhJMFpYd0lzdE5xYllqN04yVDFraHY2N2xsUElyOElia3p3U09kWGp3N3Jia2JXNndWZmk3OHRFVG05bTZsSGEzMWxmZTh0MExDT3VRamQxc2o2RnFGL0NQd0ZkMTA3Z0lqTU0yY00xaGdBTFVjNDVGOGNFYTFSNlNpd1B6NzhhRzJGamxnMGxRSVRRYU1lc0czeG8vRGxwVEJEQlVkQ2xrczY3WkJRY01jU0pjb2JZZmhqbUhYT2FRUm9FVnVKZ1hDcGFoOUtSQUhuRWFJQ2RCN1RidnlCL3piUVFjckRRZ1k0R1NETkxnWElVR3RDSmVZYUVyOVJleTJBZmRjZ0d4bG8rQyt1NXdFSElOSmZDUklFYzBIN1ovaTlZVEdlQ0w2NFVjSktJd3hnbUJzdFdwRXdPOGtBWUhySXFKd01WQVZqMXU1TlpKV0hYaXF4ZUJza1MzVGRxN3R4bE5ldkJ5Q1Y0WXBKRjl5WDlINmJUQXBrRTJ0VFRnWlFqM0pYR01yVnZVa3YyajhQNFJheHF5VlNBclU2TW1PTTNBZ1ByMk51ajhHc3dpTllqdUtCcXhwYSt0QldvZXQzeFhFVXk0T2VrbkRYelA2R0pWQ1BEN1E2TTd6MXIxSGhRdXZzWkFCRXlrTktDNnlqazVHT3VPQVNvY2x4aWdjazBJb3BFei9uNHlYZHcvM213ZVN6SEpQY3lLRGFFRTRZVkdBM1RSZWNscEdtbjF6bk5xaXlwYkxWc2srUzRwdWt3MVZ3cWJuYWNLcXlpaXZYdWJ5ZmU1ZHBsMW5nY1VyYTJwMVhWdTBJM24vSHRWWTBzTEltd2ZFMG5hRVBMejFDUUs4WjJ4dEJiY1R0Wk5hQllTTm9vWEsvU2ZWYkg1bkNTelNldVhXWTlKOE1Nbm5EQjZzelpIM1JGY1JiTFdMTCtaSXh3blRFaDBpZ0F0a1dvK0k3UW9OQXNKRmxJOTVVZlBoUUI2VUZUSkpSck1wVHErL0VvUmFtdGprb21UK3Q1R1JXMEN1TzdybCtzVG1rMlVraStlSlZITmxVeVBnU1lLejlMYWhmUG9BZzlnZnZHc0pBanBheng5dy9reVk0TWJHMnZ6NE5oSm9weW1oWmJYOXpGeDNoTGFXWHppV1R3bUZQeFA0UUI5aWZxOGVYOWJWblMzMzN6WDJ1Z09tV2VKWnFjS0trVFVyMWpibXpBWnp3dlhhRjRJbEg0NVBhVEJWenZYWnZYWnYvdnkrZE05V0U3djR1bkgrM2lzSzYzQVgrOEhGYWFCc2hTQjJudjdadHA3OUthOTlmT2VPM3Q0YmJYVUZsOXNUNkdGcTNzYnJqR3lZeit2OFRvQ0pwTTlrdUs5OTNJejdkSTUzSExDTTVqbmxldHloZ1JkQzVraGdXZkRQZWFOeG5xNnM1UGgxaGVlZjJhdXNFMVVFT3JrWStTUUFuUFhxaWpRaW1WTHpYb214aWhaWXZ5MEtCSHFwek9XNHdaVVNEeXQzdkhOSkJqVkNhNlNDeFRXL1VWNXc5M29ZTCtLV1EvQy9BVnVKVXlTS3hLYlhBQ0MvQnlmZWE3aG8rUk45OEhxdDVqbTg4TXVuMHhxY0FwMXB4bWtXamN1ZGxGTXdwQVlmMUR2ekEySktjbmpHa2xNejhtR0xDR2dNSy91TUFzdTF4ZkZOaFN4TWRXNXBxKzVnMVhwRzVSWVZ2ck4xeHdEOFNKRjZoVU5pL2tpOHdXY2dvckUyQ1dlSEtMRXRodXZoTkhBcXZ3YjhhSVdFa04wRHJSMXAwbnA3Zkk4YjJ4RkdrTjh2c0lCWW55eHoxYW5FQmlWMGRMZTY1aWYveHpoMHJhdzV4cTk4VHJrZE5rajVwbkRuUDFnalc3YUN0Q2R6aG85S3JSUUs3VVRRSDJwOUJzT0RMbkpCVjV5S05nbFRXd1ZoRTV2YloxYWZKWW9XSnpIdG5WZE16WlFGNGI1ckVaZ2c1MEkxemtxR0JZcG5JZWU1ckpuT2RKSjNDMnlZLzcrMTRkekhGZHlmdjNuT2ZaenNEWXdBL2luUC9NY014eWJFZm9yZHNENTlYbWd6MVRmZk1MZkJOZmYzTE96aTdPSnB6M0IwVjZmL2NPMWJIZjVEL2p6MlZrUXFxR3RGOTZGLzdzNEM5V1paWWJCOWRsditIM2tZTEYxODVMTThqS1k2NWM2aUlMUW5GMENUMWZCZGJOSjFmL3gremYzbTN2KzExOS9mVGhQNGdET3I4OHZMaTYrdWYvZjJkQ0xacnA1ZlphTitxTStWbWRoOEZFRjVpeDBWRmUxek5uSDBIUjhvSVptOEpGMHF1cTZGN2toV3RKdnJ1cmJnamtMYk0rOVBwdFQzOXlwN1JyWFowUDg2ZzErOVp2cm1LRUsxeDdOQ2M4ODYvWWkzeDk4QWR1RnlmekhKbkF1Z3pFZTIvVlovdDBMNnBLaUwydjRQZFgzTDZlUlpzNWNNelNEUzl2N2lQc3BOMTcxcHUwR29lb1dGMlBUdS9Oa3R0L081N1ZMK3RmTDJyZnpUZS9pYm8wTExiNCthNXZBU1dhUHJHRFhaNDduMnFFM3MxM3JtNXNHSGhhWDd0R2JtdTcxV1RpTHpHL3V6bzJEdlY5QUtqSXZIRE9jMlhwd211M2JaM0NGTFNZN0NGZWxjaGZYQjNyUnVLUWJsOVFoSzFuMW51NDV2dWVhYm5oOVJocmU5S2F2enNJTDc3bHFMTnNKYXYvM2p5UXIrcEtxSjFTMWRsYXFlOTlBVkRzSkp0ZXc2eG5taGJuMHZWbjROcWQrVTk5YjVyT2ROV3hxOE9McXN0N2N6Q1pla2JTMlRYRXpnUjM2MVpGa1JsMSt2cVFobFcwLzNjOHFDTXpEU01tUGdyR2xodVpDalYrQmtQWWtnZHdnTHVoTDZtcVhuS2orOU5RU2c3cHNIaU13TmgyYzBraGZSYmE4OGc1dVBXZ1lZTzI3Y1NmZHJEbDkyYmhLQk5KbU1xTWJHQU84a0xsVXNJekt2YzhXWkNPTFZGM1hnMERTYzVNbC92T3ZQYzd2QnRDSHdhaWorbHUzdTRYZTZxbitENmkzRytxbHE1TWY3MlhzZ091ei8rRG1MZUJwS3JoR0d3Zi9ucG02YWNQUmtJVzZJQXViS0RuSmMvSzJGNFZtcWoxWU15L3luMnczTkdkejJHYkRLVDVacUhaNGZVYlZndVRucExGTnpjTTNmRk1OYzIzV3gvaFJTamJwT0QrYW9WNGtyZi8vTW5SOHNCL0QwWjJqcU80SGYzazkvcElqWHVBdExnTFg5bjB6dk1nem5iTnY1eGcwbktkRWJydlcweXdDVUJIUGtUa21iL1JDVVBveEcxTDZBSC81ZndrUlZpaldpYnE4UWIwbTMxVXIyU2RRdFJOdEp4dDcxYUZPT2pUbktvalFpdVVPRXVXVXByZmxVV2c3cGhmbHp5NWM0YWRuRzVUUEg1N3J4NW1wZXpPanNCVlZyNjF2V0dWajhPSEd6OG1UeWozSzcwLzV2T3hoQThsdk5Gci9zUmVFMTgxYXM1WTByNW5xekp3OW9ldzl0QnpYWngvbjZ1empMSEkvQnFZK000bW1uSjJPSXJENWlMNU0rc2tHbTMxem9mbzJQaW5wdUxPSFQ0RlJNZnlaQjhkaHVvYnYyVzZZWTdhSVdWVjhvT29oNGhOVDAvU3pPYzlNeTF5bW5QbWZXYS8vSEllaEgyUXZCb2l2UGhWWUlXNzQ2UWt5eTZmY2dOT2p2djAxc2tybzllMXZKdE44Z29wTDRmMUFINXR3TFF1akRVRkFGaUEzVUYwOWF1OTA5VktmaFZrenRodVllalF6bjRLcDdUL056Wm45SENlWTk4M0lCYXB4QjFJSy9HUi9Ja0hQSFhXZFVDbzIyek1JV1R6OWZQbC92K1Q2TlgyZzZxYURCR051d2puR2QzMTFWYys2d0NjU3R3VjdVZzFqWmdiQjAxTytUVFNLZkVkbnhZNCtxcjc5Y1U1OVJFdjA4U2NLNnBITCtHTkJ3ejZZbnVFVWkxUmFIaXRwLzhsWHczRTI0UDloNnJ6UVZXTnVCOTdzQjVrZVRxWWZ5NHYzdjB1dlk4LzFac20wYzA4MjBCN3A3MkpOTUw2dFBNMlA4N0M5UzRSaUJvQ2ZNbER6Wkh0UEdBT3RqOE9ZZWQ5aEhFOEI4QmJyZ3lHMHZqYWVueEZsL2Z1WFZ4c1RwTi9OVkkrZjUwL3F6Z0VYanZCSkJ3dVAzcUVIZEs4Qi8vdVhuLzk5ZmYzdG0vRi92L3o3bnoramYyL2dRajlSMXovUiswMXZqY3NkTzJzdmYvNzM0S1ZIOFBvOWxuNm1PazliMlBNVGVlVW42aVFEcVpJN0d6ZnloVWk3dUtSckw1eW80MnJzWHV5YnZIUGlubjNQMkMzZ01oanhjZ2x5a1dkeC8yVmk1QWY3L3NHK2Y3RHZIK3o3M2JMdkNzTmxZNlBoc2w0TERtSDYyenkwKzNMNjBpSWR5ZWNydWo4MXQ1cDUyZ3NsWXZDaWxja3p4T3V6ajdueG5KMmh3NXFmb3VNWkVUQUxjNGFTNTRsZUx0K3ZSQzFNNmVKUWJseG1wWmlCNFY4M0dDczBvT3BUelZzZXhJKzNEYXVxejNLamlXL3ExUmpyYS9QUFYyV1RCNTh0M3pNT1BGZStaM3kzTXdDWjkvYzJUT3d4aGpkRnRUdkc4MzRRN2RhQnZoS2FSZWoxbnovLy9Odk5CYXRlUE5jdW1yLy9TWDI0K3V2Nit0Ky8vRWw5K1BXdjhvTk5pTzRmdi8xRS8zNzlFL1dQMTVoN0FkTnUrdHoyajhLOU81Zm01OS9nNUNIcS8vYnQ4ajgvL2ZMTG41dFg0U2Y2T29PMGY1Y1ZPRUF1N0NEUnQwSDljQkQvZllnZjRlNHRZaXduVm5hdzdxK21hOWl1OVo5aHBPdW1hWmpHZjFqVkJxYnhuNWJuK01BTVRlUDRFZnBqTmZpN0dZeWdDRC9DUnZUTzVmZ1BHZnBEaHY2UW9UOWs2QThaK2tPR3ZwSFZMZ2tVVE1lU2ovUE5TOFh0QW5hRGtOMFF5SEN5VUliVEJ0WnNCZ1hyTm95ejM3YWNrZC96VXlYVVY0enZULzVYalRYMjZTdzc3YXJ2NXgvWTNsTmlMNm9heDNxMDV1dU5BeTVJMVJqV1kveFBNUXJkYzBQVmRzMFppVmlNSE0yY1ZYWC83YnhaYTlhVE5JRHFyaXZpYkV2UnplajN3bS83Uk1QN2MzMXJPUHhYK0ZNUW1tNG9lQ0J5ekJaUWJlZEhhUHliaGNZSHZxbmowSGhkTjRPZzV4bTVRT3lCcVJyaXpBN05lMktNblptWU5KTlhadVlma1Jua0FweUQwSnVwbGdscDdqTm5RNUo3V2Y0djVMQVY5RFBUVlAxU2pjS3hON05YQ0lOY1RqL2ovY2dTTFhDOCs4QURQeEo5djJlaUwrWWIzOXh2N3NXWjZ0dmN6SXQ4eU5TK25ldFFGRC9iT3R4cHNuL2Z6bjlmcDdPTHMveWJ0dVhhcnBWUUhudytOMmNhYmhIWVFmanQvTVBadC9PRkd1cGoxTnA2djVzNlNiTEdqbXBVUzU5VnREenozSW1uSGRXdXVReE5GeTUrZ045VmZUL1kwSTJobW83bkJtYjQ2aDJsSlUxUHVmNkZnSlpEMjFTajBBdDBGVUNtVnQwODRoVlFaQUxmTTVMWFNUTEVTOWZLTmNPRk41dmFycldkamhIaEJvRjVjZ283bHJwMEQwbjlQQXZkMEFNdzFTUEh2YWxCMjdIRG1lcGF4N1dxR280ZHdDMlltWllkaExPZFU0QjlPaEhVV0YxcllXcGp6NXZpRXgvaGIwODV0MVRZSHRYb3Z0UkUza09WbnUyVDdrMmErM0dpOXZ3VTVjMFJ5dE1oeW52TkRvNXFHNWZNM2tnOHZtY1lkakNMZkVndFdtUlk1a25aWCtLbGZVVytEZFZ6VzFlRDB3NmN0QXBYQmFva013OGN5MVkzZG9ELy9pUHlRdldVRFJPVithUXRabUVzQjNPMHpSdUhJTlZ6Qkk3ZE9RTExkN0ZIOHBvTzFHTmwxRkZjZWE0QzJ6Z3RYOTV6d3BoWnFHR282dU05NGN4ZUtlQlk5WGhONWVXSE1ueThNcHhvSk1oeW1aSk5adnFEcHp2UmI0c1VVNUNOdVQ5eFpsWDV4MUkrWUpFNzRGL1dncmd6T1lEL0tpQkcvRk5SVDBub05YdGVDT1pDSkp6K2hjbDR5OFR6d2lUL2V3VWsyYnhDNlpnL1FyNFZiWjdOS1VkdTJJSHV6YzFadk1jQTAxVUgyVzRjTnhiWGN3ZWtnOUdnV3h4UnV2L25XM3A0bVhra3gyZzBHMW43WDg1dkdOelFENXZKOTdTWmVNQWNtTS9ZTUVmSWZjdEd3dGNxNU1hZW5RV1JOakYxWk1TN09LdXVoUFI2TmQyK0l5My9FS0hIaTlBY3pTQm4yUWFxMldxUjNrZ3RyMGI5U2Q4dkxDWWE3Rk5GN0VkUnFkMUZwVkxuUXhqN1pycDkvRmRVa01hYmhYbmRHNjREY21PNWViZndWL1Q3T0F4VC81ay84MEpQOThEMTJXUHJhL0lqWHBYa3RjQUVwaDU2cyt2WFdzVDNSbDhYWTFNMWdCa0UvL09FcGlja2RuM1c5MXp6djU3UTlpbXVld3BxT3dnTi9FQ1RKME9UNjNVVGM0VzhiTzhqam9PNVB2dEhPSXZNZjZ4eDNHL25HYzg5THg2R3BGemZ0M05FemVkcDYyV2l4eWZtYyswellSWDU4NUw4V2pnTTJhNi8xaEtlc0lUd0tRN0hqNkxCNzZSbzhQN241ZHM1Q253K1B3S2pVTFZhbGVqSS83NUZkT1FXZkUvcGNacEZQRm1wNUNNT3pLNU5RVW1QYXdtc1Awb3FIMXBTK1FpNFRWV1NjdTczMDZHZ1V5ejhBUVdoajZEVEgzYURONGhES3hKaWtaTHljR01yQVphb3RiWVhHYjdaL2dVbWNwSGRQRC9icmgzR21TcFNDY3BPQVdiU3lLQUtxbGQ5UDhoWno3NmdWNGZtajZzUS9pNm9KajA2SlFwMzFGQWZkNHVSOThlTitaQlJ6OHk1RFlmWXRvUFFtOFZkMjhHbHV1R3p5RGZVMEJ5R016VTByVGlKSWZVQXNGMXJoSjZsQTNYVTVjaFY1Nm9OVkEyWTEyZUVvZUVUTXNoL2dnNE9vZlJrNW5uQ1JjTmZReGdvS0I4ZnM0c3NHS3cweDBCOU5pOUM3OEtjMjNxWUI0WDQrN1dzaG1NSStoQ2lQb3l3WDBUY0x5R1d3NGo4RVBoK2RwWVNPL3BzbjB0QVNHQ3lxVWN6TzR4Ym5odWF5ekMzYWM4Qk1UQi9halRxVjduY2lNaTkyZmFvNzdrRHp3dkxLWkxvMlNnd1o2V3Znc0lRKzRkd1UwU3JTYkIvTVVrRGI4aUdYVGc3c3gwVWpQMUhwTVlFU0NleW8vREo5Unl2Y2ZuTHJ4RUFYMUZRMVBVWi85ejN3cTh6TXpEZHNKQklNS3NvU0g1eDRhdmgrTktmZWZwejhLK1BZeThJWWVmNmh2ZUNPRWhmQytKZ3cxc3p6d3ZUMStBZkc5NkxESE4rQ1k5LzdsV1VJUU1mZklRUDFqOWNtTm9sUUFGa0Z5UkQ3bCsvL2ZSeiszNzQrTVIvL2VYMzY3ejJ0cDJjY0U0UjhCWmZaL2JjQnFabDNrTGVvdUowaXdKTkpra2Fxbkh2Z2hnU0U3cVZMUTVDMHltVDFkbVo2YzdYMWhsdlB4bG04ZUhaR2JwRjd2cXNkb24rbjMrYXgxamx4dFpZU0luKzFyWFp0TlVxSkliNHBEMDNYVE1JdmlJOXJ2alpzMnFEYUdZK2ptZG1NUGFBY1gxV0w3NEFzUjlubGxjWS85NDJWYU40SXBKYVA2ait6OXJQRzRlZTFLUnRQejZXbGhFaU5Gc0ZYMHlneGtOVDkxd2p1RDRyZmUrYk05c3owcWRVNlhFUW9kU0szQlNwNGdza1N5MXJvSmpEb3hyMmo5VTdjdlZ3Z0ZjUHN0eE5CTC9PbDg3T2tGRDVpdGRoQS9QS0R1NzEyZHBaelZwZlkyY1ZqVmU4azdXOXVlbDFGbGpSOXVhWFpwNnZXb1F0dGIwZ2ZQUmF5Um5mYnpTdy9UNk9DMXAvOEpYL3N2NGovN1ZWWW9GUURBMkxzTFZZM1FDS0xTKzRQZ08yRzZWRnFFSVBtTE0xT0hkeFpqNC9teENvOWIyaFBqYU5DQlJXenZQaFI5N3MrdXgyYVFkWnlCV0pHSzZRcStWZFJ4T0RpMXVpNExUY21MN2VSbWx6dHpkUmVIblRQbTl2NHFWT29TeTNZdzlkTVgzM2gzL29QZnFIOXRFTU1mSHMwZzgzRGZvd3pSQkhueE1XSFJUVndBMmEzVFoxY3BmV0IvSXp6T1o0S0RWOU53MXQ4NklmczFFbjFzcnlYc2lEMUxLTklxU2tyMjFWbHpaUDg3c3JlbWdJY01lL3pqeVVvcDluMDRUS0l4ZWlsaS80OW9jdEtsNGlBcmJ1NnF5VXVIOXhBYUhhdnpLUGJQSnpHZ3I3cjgzNWxCK3k2T0lQU2RyaWh5eXg4RU11OWU5REdrYjdZVk51M1ljMDRQY0RhZ2dua1gzSXBYNTkySnFTOVNGTHBQcFF5bmI2Z0dLc1AxUm5GcTM5SEh5b3l0NkJQd1lmY2xreEg2cHpXVDRVTTFBK2tMeVJEMG04em9kOGZzYUhZaGJGaHgzWkRSOHFjeEFPVXNLSmxrOVNMcElBNkNveHYvN1Q5WndjWkhlVGNuaFIxdjJLaEhWV0dTZXdYZTNib2JaVUt5MmJWUmFDZkdCL3E5S1R5Z0Z2MWxncTlaVkdRWFhlcHEzczBGWEtta29qWDRoam81YjNPb3NGTzR6L3ZxdFZqdW5QeWxUc3RzOGNZSjNSVlYvVmJHQ0h0bGxlUjJQbStXc2E1VTIzVzliZE41dDJYdTV5UHdsVy8rRkhQOXFQdmhlaWhiS0NnTm5UT0dncUNubnZ2NkI3WXVaOWZCcWJLT0w0YVp3WW9oYXA0eEFZWDRDeisxdnVxM1ptYnl5ODFjSmZ1VmlwNVA5MlhtSGh6MzF5dmI0U0IxajRUMkF0emdXTXZNaGF2TW1jU1lUYXhjZXhxWUp3SEcrd1hhNE5vMUtDbFMyUWF3YkcydDcyMlozalJXTDREVWU3aHoyVXdOY0wvT29XQStPM2MreE1PVit6QjBkYThrYjI4RWk5N0VEbGE3TXRiL08wVE1jUDR5LzI3SHJ2b2xaWTdwNUs1djZJSkhxZFNLS2pwTzJHcGQ5LzhWOWdFZHRtNjlxSkxjcUJGR2R1Qk1CUkV2K0FSVGxrV1U0cTNBdTBlUUI5dnR5V3Q0Rk9TNWpCZEZVTm1FVG1kMjEzV2lyeXZBTlRGRmQ1T3pJb2YzV1JXbkF1Wmlid1ZHTlB3SENSK0VmeXYrRzJTRVBtN0hwZXUvejEwMDRrOGUyOGdDWE85NGdYUURuVnBuRmgyTE4vNVc3bVhuK3g1S1VuM3UzcmRhMFZXN3pndUMraUdmZ1hGTVhYSHo5U2tCWXVhNWNVdW4wYlNlRHlHbFhqblIxR2tNb0k3aE5BR2d4b1Z0VVFZUVA2T3RBZlN4L2dqMzBKMmpudFZMWU9jdytZUXloN0o4clpTSXpyYnRFOUR1ZmU0RDM5eit1RTFaMzh5Q1UxVXNMQTBDNW5abWk2S0trV0FzaC9VUTFqL1FPOENwZlBOakR6WnpRMzJPemkvWTBkUVdMNDE1WW9ITjF6QXcrWWw4RFdadXJNTmdQY1ZkNDZndDk0U3QvWTNsQUsyelkxdE9GN3pNSXZnUDFzNnJGZWRDWHZ4U0t5Ni8xZlgxTjRhVXhHZlh0UVJtTzdqbkYxWUZUS0RzdmZxMnFBcjd4U1ZPTVFkZXpsYS9VV25PNWd6YkRpZUcvUUNnMDNTRGdZQ1hwbjdWbFdhK1c3Ty9OQ2MrYVE4b2pjVE5YTnI4WGRybWZCVUpzMXo0M3JqeC8wMUxJZGVhZnMyTDBoZmxWWjVWSTN5RlhXUDNtTmhNd1Z0bHRCSHBLWDkwZzMrRkV2WWJQaDJiSGRBUlFQeFJDN3Jlcms4WmJvcW1MbWgrUytJTVdudjNlNWdoT29yNXZIZmFoT3VpR1BZR3pxMHlCeUNQTzhQcU9hamMrZjY2WnUwS2I1NllxaVA5VnFWelgxNnVyWHB0azBuK2thcmVtcWZ2Vk1VVmVmdE1aem8ySG9xdmtyMVdnWTVsVmQwL1hQTDRxcDJLRmFWaTNEZDJleld6WGNUZFh6dDhkZ2J4bmhybEZ1ais3WUR0enpnNzB1bmYwRDdlNmJBNzYvM24vWkZPL056anhuRFJ5ZG5UM2JKakNTbWpybC81VnpJTmZmUUo5ajZZMUx1bDM2bmxFY3dRNGxBOFArVFZ1NVFiOG9pSmo4SDJVOVk1dUxJcDg4dU5rL1VYOEwvMFExS0MwUDhDVjZ3cjQ5VlBuUGl4NzBBNkRsTGt5NWJkY0xRR1piUTFXTjdNSmNSNEd0Y2tmekRFQTlKaWduS3loZEZrZG4xVE1xOFBLcXl4YVM0YTlkdWJCdHg5YXVYeWhkd2tCejlqZjMvTU01Z1NQbjEvU0g4eFJhbkYrZlo5amkvSy8vRndBQS8vOHI3Qys2Qm9NREFBPT0=
  kind: Secret
  metadata:
    creationTimestamp: "2024-10-17T19:25:20Z"
    labels:
      modifiedAt: "1729142627"
      name: prometheus
      owner: helm
      status: deployed
      version: "2"
    name: sh.helm.release.v1.prometheus.v2
    namespace: monitoring
    resourceVersion: "390034"
    uid: 03807b73-486f-4a48-8a5c-596955c8966f
  type: helm.sh/release.v1
kind: List
metadata:
  resourceVersion: ""
