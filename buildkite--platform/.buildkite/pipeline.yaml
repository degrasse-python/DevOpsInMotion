steps:
  - label: "üîß Generate Terraform Config"
    command: |
      # Create terraform directory if it doesn't exist
      mkdir -p terraform
      
      # Generate main.tf with variables from build
      cat << EOF > terraform/main.tf
      provider "aws" {
        region = "\${AWS_REGION}"
      }

      module "eks" {
        source  = "terraform-aws-modules/eks/aws"
        version = "~> 19.0"

        cluster_name    = "\${EKS_CLUSTER_NAME}"
        cluster_version = "1.27"

        vpc_id     = "vpc-"
        subnet_ids = ["subnet-"]

        eks_managed_node_group_defaults = {
          instance_types = ["\${EKS_NODE_INSTANCE_TYPE}"]
        }

        eks_managed_node_groups = {
          default = {
            name = "\${EKS_NODE_GROUP_NAME}"

            min_size     = \${EKS_NODE_MIN_SIZE}
            max_size     = \${EKS_NODE_MAX_SIZE}
            desired_size = \${EKS_NODE_DESIRED_SIZE}
          }
        }
      }

      # Output values needed for the UI
      output "cluster_details" {
        value = {
          cluster_name = module.eks.cluster_name
          region      = "\${AWS_REGION}"
          console_url = "https://\${AWS_REGION}.console.aws.amazon.com/eks/home?region=\${AWS_REGION}#/clusters/\${EKS_CLUSTER_NAME}"
        }
      }
      EOF

  - wait

  - label: "üåç Initialize Terraform"
    command: |
      cd terraform
      terraform init

  - wait

  - label: "üìã Terraform Plan"
    command: |
      cd terraform
      terraform plan -out=tfplan

  - wait

  - label: "üöÄ Apply Terraform"
    command: |
      cd terraform
      terraform apply -auto-approve tfplan
      
      # Extract and save outputs for the UI
      echo "--- Extracting cluster details"
      CLUSTER_DETAILS=$(terraform output -json cluster_details)
      echo "$CLUSTER_DETAILS" > cluster_details.json
      
      # Upload artifact for the UI to consume
      buildkite-agent artifact upload cluster_details.json

  - wait

  - label: "‚öôÔ∏è Configure kubectl"
    command: |
      aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

  - wait

  - label: "üîß Install Nginx Ingress"
    command: |
      if [[ "${NGINX_TYPE}" == "community" ]]; then
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm install nginx-ingress ingress-nginx/ingress-nginx
      elif [[ "${NGINX_TYPE}" == "f5" ]]; then
        helm install nginx-ingress oci://ghcr.io/nginxinc/charts/nginx-ingress
      fi

  - wait

  - label: "üîí Install Cert Manager"
    if: build.env.INSTALL_CERT_MANAGER == "true"
    command: |
      helm repo add jetstack https://charts.jetstack.io
      helm repo update
      helm install cert-manager jetstack/cert-manager \
        --namespace cert-manager \
        --create-namespace \
        --version v1.14.5 \
        --set installCRDs=true

  - wait

  - label: "üì¶ Deploy Application"
    command: |
      # Clone the provided GitHub repo
      git clone ${GITHUB_REPO} app
      cd app
      
      # Install the helm chart
      helm install my-app ./helm-chart

  - wait

  - label: "üì§ Update UI Status"
    command: |
      # Download the cluster details artifact
      buildkite-agent artifact download cluster_details.json .
      
      # Send cluster details back to the UI endpoint
      curl -X POST ${BUILDKITE_UI_CALLBACK_URL} \
        -H "Content-Type: application/json" \
        -d @cluster_details.json

env:
  NGINX_TYPE: ${NGINX_TYPE}
  INSTALL_CERT_MANAGER: ${INSTALL_CERT_MANAGER}
